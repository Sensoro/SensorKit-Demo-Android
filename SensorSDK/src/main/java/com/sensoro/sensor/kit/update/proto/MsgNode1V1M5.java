package com.sensoro.sensor.kit.update.proto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNode_1v1_m5.proto

public final class MsgNode1V1M5 {
  private MsgNode1V1M5() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code Activtion}
   */
  public enum Activtion
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ABP = 0;</code>
     */
    ABP(0, 0),
    /**
     * <code>OTA = 1;</code>
     */
    OTA(1, 1),
    ;

    /**
     * <code>ABP = 0;</code>
     */
    public static final int ABP_VALUE = 0;
    /**
     * <code>OTA = 1;</code>
     */
    public static final int OTA_VALUE = 1;


    public final int getNumber() { return value; }

    public static Activtion valueOf(int value) {
      switch (value) {
        case 0: return ABP;
        case 1: return OTA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Activtion>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Activtion>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Activtion>() {
            public Activtion findValueByNumber(int number) {
              return Activtion.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(0);
    }

    private static final Activtion[] VALUES = values();

    public static Activtion valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Activtion(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Activtion)
  }

  /**
   * Protobuf enum {@code ClassType}
   */
  public enum ClassType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CLASS_A = 0;</code>
     */
    CLASS_A(0, 0),
    /**
     * <code>CLASS_B = 1;</code>
     */
    CLASS_B(1, 1),
    /**
     * <code>CLASS_C = 2;</code>
     */
    CLASS_C(2, 2),
    ;

    /**
     * <code>CLASS_A = 0;</code>
     */
    public static final int CLASS_A_VALUE = 0;
    /**
     * <code>CLASS_B = 1;</code>
     */
    public static final int CLASS_B_VALUE = 1;
    /**
     * <code>CLASS_C = 2;</code>
     */
    public static final int CLASS_C_VALUE = 2;


    public final int getNumber() { return value; }

    public static ClassType valueOf(int value) {
      switch (value) {
        case 0: return CLASS_A;
        case 1: return CLASS_B;
        case 2: return CLASS_C;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ClassType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ClassType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ClassType>() {
            public ClassType findValueByNumber(int number) {
              return ClassType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(1);
    }

    private static final ClassType[] VALUES = values();

    public static ClassType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ClassType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ClassType)
  }

  /**
   * Protobuf enum {@code SensorError}
   */
  public enum SensorError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SENSOR_ERR_NONE = 0;</code>
     */
    SENSOR_ERR_NONE(0, 0),
    /**
     * <code>SENSOR_ERR_NO_DATA = 1;</code>
     */
    SENSOR_ERR_NO_DATA(1, 1),
    /**
     * <code>SENSOR_ERR_CRC = 2;</code>
     */
    SENSOR_ERR_CRC(2, 2),
    /**
     * <code>SENSOR_ERR_DATA = 3;</code>
     */
    SENSOR_ERR_DATA(3, 3),
    /**
     * <code>SENSOR_ERR_FAULT = 4;</code>
     */
    SENSOR_ERR_FAULT(4, 4),
    /**
     * <code>SENSOR_ERR_ALARM = 5;</code>
     */
    SENSOR_ERR_ALARM(5, 5),
    /**
     * <code>SENSOR_ERR_ALARM_HIGH = 6;</code>
     */
    SENSOR_ERR_ALARM_HIGH(6, 6),
    /**
     * <code>SENSOR_ERR_ALARM_LOW = 7;</code>
     */
    SENSOR_ERR_ALARM_LOW(7, 7),
    /**
     * <code>SENSOR_ERR_UNKNOWN = 127;</code>
     */
    SENSOR_ERR_UNKNOWN(8, 127),
    ;

    /**
     * <code>SENSOR_ERR_NONE = 0;</code>
     */
    public static final int SENSOR_ERR_NONE_VALUE = 0;
    /**
     * <code>SENSOR_ERR_NO_DATA = 1;</code>
     */
    public static final int SENSOR_ERR_NO_DATA_VALUE = 1;
    /**
     * <code>SENSOR_ERR_CRC = 2;</code>
     */
    public static final int SENSOR_ERR_CRC_VALUE = 2;
    /**
     * <code>SENSOR_ERR_DATA = 3;</code>
     */
    public static final int SENSOR_ERR_DATA_VALUE = 3;
    /**
     * <code>SENSOR_ERR_FAULT = 4;</code>
     */
    public static final int SENSOR_ERR_FAULT_VALUE = 4;
    /**
     * <code>SENSOR_ERR_ALARM = 5;</code>
     */
    public static final int SENSOR_ERR_ALARM_VALUE = 5;
    /**
     * <code>SENSOR_ERR_ALARM_HIGH = 6;</code>
     */
    public static final int SENSOR_ERR_ALARM_HIGH_VALUE = 6;
    /**
     * <code>SENSOR_ERR_ALARM_LOW = 7;</code>
     */
    public static final int SENSOR_ERR_ALARM_LOW_VALUE = 7;
    /**
     * <code>SENSOR_ERR_UNKNOWN = 127;</code>
     */
    public static final int SENSOR_ERR_UNKNOWN_VALUE = 127;


    public final int getNumber() { return value; }

    public static SensorError valueOf(int value) {
      switch (value) {
        case 0: return SENSOR_ERR_NONE;
        case 1: return SENSOR_ERR_NO_DATA;
        case 2: return SENSOR_ERR_CRC;
        case 3: return SENSOR_ERR_DATA;
        case 4: return SENSOR_ERR_FAULT;
        case 5: return SENSOR_ERR_ALARM;
        case 6: return SENSOR_ERR_ALARM_HIGH;
        case 7: return SENSOR_ERR_ALARM_LOW;
        case 127: return SENSOR_ERR_UNKNOWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorError>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorError>() {
            public SensorError findValueByNumber(int number) {
              return SensorError.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(2);
    }

    private static final SensorError[] VALUES = values();

    public static SensorError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SensorError(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SensorError)
  }

  /**
   * Protobuf enum {@code SensorType}
   */
  public enum SensorType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SENSOR_TYPE_TEMP = 0;</code>
     */
    SENSOR_TYPE_TEMP(0, 0),
    /**
     * <code>SENSOR_TYPE_HUMI = 1;</code>
     */
    SENSOR_TYPE_HUMI(1, 1),
    /**
     * <code>SENSOR_TYPE_LIGHT = 2;</code>
     */
    SENSOR_TYPE_LIGHT(2, 2),
    /**
     * <code>SENSOR_TYPE_GPS = 3;</code>
     */
    SENSOR_TYPE_GPS(3, 3),
    /**
     * <code>SENSOR_TYPE_ANGLE = 4;</code>
     */
    SENSOR_TYPE_ANGLE(4, 4),
    /**
     * <code>SENSOR_TYPE_PM2_5 = 5;</code>
     */
    SENSOR_TYPE_PM2_5(5, 5),
    /**
     * <code>SENSOR_TYPE_PM10 = 6;</code>
     */
    SENSOR_TYPE_PM10(6, 6),
    /**
     * <code>SENSOR_TYPE_LEAK = 7;</code>
     */
    SENSOR_TYPE_LEAK(7, 7),
    /**
     * <code>SENSOR_TYPE_CO = 8;</code>
     */
    SENSOR_TYPE_CO(8, 8),
    /**
     * <code>SENSOR_TYPE_CO2 = 9;</code>
     */
    SENSOR_TYPE_CO2(9, 9),
    /**
     * <code>SENSOR_TYPE_NO2 = 10;</code>
     */
    SENSOR_TYPE_NO2(10, 10),
    /**
     * <code>SENSOR_TYPE_CH4 = 11;</code>
     */
    SENSOR_TYPE_CH4(11, 11),
    /**
     * <code>SENSOR_TYPE_LPG = 12;</code>
     */
    SENSOR_TYPE_LPG(12, 12),
    /**
     * <code>SENSOR_TYPE_FLAME = 13;</code>
     */
    SENSOR_TYPE_FLAME(13, 13),
    /**
     * <code>SENSOR_TYPE_ARTIFICIAL_GAS = 14;</code>
     */
    SENSOR_TYPE_ARTIFICIAL_GAS(14, 14),
    /**
     * <code>SENSOR_TYPE_WATER_GAGE = 15;</code>
     */
    SENSOR_TYPE_WATER_GAGE(15, 15),
    ;

    /**
     * <code>SENSOR_TYPE_TEMP = 0;</code>
     */
    public static final int SENSOR_TYPE_TEMP_VALUE = 0;
    /**
     * <code>SENSOR_TYPE_HUMI = 1;</code>
     */
    public static final int SENSOR_TYPE_HUMI_VALUE = 1;
    /**
     * <code>SENSOR_TYPE_LIGHT = 2;</code>
     */
    public static final int SENSOR_TYPE_LIGHT_VALUE = 2;
    /**
     * <code>SENSOR_TYPE_GPS = 3;</code>
     */
    public static final int SENSOR_TYPE_GPS_VALUE = 3;
    /**
     * <code>SENSOR_TYPE_ANGLE = 4;</code>
     */
    public static final int SENSOR_TYPE_ANGLE_VALUE = 4;
    /**
     * <code>SENSOR_TYPE_PM2_5 = 5;</code>
     */
    public static final int SENSOR_TYPE_PM2_5_VALUE = 5;
    /**
     * <code>SENSOR_TYPE_PM10 = 6;</code>
     */
    public static final int SENSOR_TYPE_PM10_VALUE = 6;
    /**
     * <code>SENSOR_TYPE_LEAK = 7;</code>
     */
    public static final int SENSOR_TYPE_LEAK_VALUE = 7;
    /**
     * <code>SENSOR_TYPE_CO = 8;</code>
     */
    public static final int SENSOR_TYPE_CO_VALUE = 8;
    /**
     * <code>SENSOR_TYPE_CO2 = 9;</code>
     */
    public static final int SENSOR_TYPE_CO2_VALUE = 9;
    /**
     * <code>SENSOR_TYPE_NO2 = 10;</code>
     */
    public static final int SENSOR_TYPE_NO2_VALUE = 10;
    /**
     * <code>SENSOR_TYPE_CH4 = 11;</code>
     */
    public static final int SENSOR_TYPE_CH4_VALUE = 11;
    /**
     * <code>SENSOR_TYPE_LPG = 12;</code>
     */
    public static final int SENSOR_TYPE_LPG_VALUE = 12;
    /**
     * <code>SENSOR_TYPE_FLAME = 13;</code>
     */
    public static final int SENSOR_TYPE_FLAME_VALUE = 13;
    /**
     * <code>SENSOR_TYPE_ARTIFICIAL_GAS = 14;</code>
     */
    public static final int SENSOR_TYPE_ARTIFICIAL_GAS_VALUE = 14;
    /**
     * <code>SENSOR_TYPE_WATER_GAGE = 15;</code>
     */
    public static final int SENSOR_TYPE_WATER_GAGE_VALUE = 15;


    public final int getNumber() { return value; }

    public static SensorType valueOf(int value) {
      switch (value) {
        case 0: return SENSOR_TYPE_TEMP;
        case 1: return SENSOR_TYPE_HUMI;
        case 2: return SENSOR_TYPE_LIGHT;
        case 3: return SENSOR_TYPE_GPS;
        case 4: return SENSOR_TYPE_ANGLE;
        case 5: return SENSOR_TYPE_PM2_5;
        case 6: return SENSOR_TYPE_PM10;
        case 7: return SENSOR_TYPE_LEAK;
        case 8: return SENSOR_TYPE_CO;
        case 9: return SENSOR_TYPE_CO2;
        case 10: return SENSOR_TYPE_NO2;
        case 11: return SENSOR_TYPE_CH4;
        case 12: return SENSOR_TYPE_LPG;
        case 13: return SENSOR_TYPE_FLAME;
        case 14: return SENSOR_TYPE_ARTIFICIAL_GAS;
        case 15: return SENSOR_TYPE_WATER_GAGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
            public SensorType findValueByNumber(int number) {
              return SensorType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(3);
    }

    private static final SensorType[] VALUES = values();

    public static SensorType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SensorType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SensorType)
  }

  /**
   * Protobuf enum {@code AppCmd}
   */
  public enum AppCmd
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>APP_CMD_NONE = 0;</code>
     */
    APP_CMD_NONE(0, 0),
    /**
     * <code>APP_CMD_RESET = 1;</code>
     */
    APP_CMD_RESET(1, 1),
    /**
     * <code>APP_CMD_FAC_RESET = 2;</code>
     */
    APP_CMD_FAC_RESET(2, 2),
    /**
     * <code>APP_CMD_DFU = 3;</code>
     */
    APP_CMD_DFU(3, 3),
    ;

    /**
     * <code>APP_CMD_NONE = 0;</code>
     */
    public static final int APP_CMD_NONE_VALUE = 0;
    /**
     * <code>APP_CMD_RESET = 1;</code>
     */
    public static final int APP_CMD_RESET_VALUE = 1;
    /**
     * <code>APP_CMD_FAC_RESET = 2;</code>
     */
    public static final int APP_CMD_FAC_RESET_VALUE = 2;
    /**
     * <code>APP_CMD_DFU = 3;</code>
     */
    public static final int APP_CMD_DFU_VALUE = 3;


    public final int getNumber() { return value; }

    public static AppCmd valueOf(int value) {
      switch (value) {
        case 0: return APP_CMD_NONE;
        case 1: return APP_CMD_RESET;
        case 2: return APP_CMD_FAC_RESET;
        case 3: return APP_CMD_DFU;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AppCmd>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AppCmd>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AppCmd>() {
            public AppCmd findValueByNumber(int number) {
              return AppCmd.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(4);
    }

    private static final AppCmd[] VALUES = values();

    public static AppCmd valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AppCmd(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AppCmd)
  }

  /**
   * Protobuf enum {@code NodeState}
   */
  public enum NodeState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NODE_STATE_UNKNOWN = 0;</code>
     */
    NODE_STATE_UNKNOWN(0, 0),
    /**
     * <code>NODE_STATE_STATIC = 1;</code>
     */
    NODE_STATE_STATIC(1, 1),
    /**
     * <code>NODE_STATE_MOVE = 2;</code>
     */
    NODE_STATE_MOVE(2, 2),
    ;

    /**
     * <code>NODE_STATE_UNKNOWN = 0;</code>
     */
    public static final int NODE_STATE_UNKNOWN_VALUE = 0;
    /**
     * <code>NODE_STATE_STATIC = 1;</code>
     */
    public static final int NODE_STATE_STATIC_VALUE = 1;
    /**
     * <code>NODE_STATE_MOVE = 2;</code>
     */
    public static final int NODE_STATE_MOVE_VALUE = 2;


    public final int getNumber() { return value; }

    public static NodeState valueOf(int value) {
      switch (value) {
        case 0: return NODE_STATE_UNKNOWN;
        case 1: return NODE_STATE_STATIC;
        case 2: return NODE_STATE_MOVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NodeState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NodeState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeState>() {
            public NodeState findValueByNumber(int number) {
              return NodeState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(5);
    }

    private static final NodeState[] VALUES = values();

    public static NodeState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NodeState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NodeState)
  }

  /**
   * Protobuf enum {@code NodeAlarm}
   */
  public enum NodeAlarm
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NODE_ALARM_NONE = 0;</code>
     */
    NODE_ALARM_NONE(0, 0),
    /**
     * <code>NODE_ALARM_STATIC = 1;</code>
     */
    NODE_ALARM_STATIC(1, 1),
    /**
     * <code>NODE_ALARM_MOVE = 2;</code>
     */
    NODE_ALARM_MOVE(2, 2),
    /**
     * <code>NODE_ALARM_COLLISION = 3;</code>
     */
    NODE_ALARM_COLLISION(3, 3),
    /**
     * <code>NODE_ALARM_ROLL = 4;</code>
     */
    NODE_ALARM_ROLL(4, 4),
    /**
     * <code>NODE_ALARM_INVERTED = 5;</code>
     */
    NODE_ALARM_INVERTED(5, 5),
    /**
     * <code>NODE_ALARM_FALL = 6;</code>
     */
    NODE_ALARM_FALL(6, 6),
    ;

    /**
     * <code>NODE_ALARM_NONE = 0;</code>
     */
    public static final int NODE_ALARM_NONE_VALUE = 0;
    /**
     * <code>NODE_ALARM_STATIC = 1;</code>
     */
    public static final int NODE_ALARM_STATIC_VALUE = 1;
    /**
     * <code>NODE_ALARM_MOVE = 2;</code>
     */
    public static final int NODE_ALARM_MOVE_VALUE = 2;
    /**
     * <code>NODE_ALARM_COLLISION = 3;</code>
     */
    public static final int NODE_ALARM_COLLISION_VALUE = 3;
    /**
     * <code>NODE_ALARM_ROLL = 4;</code>
     */
    public static final int NODE_ALARM_ROLL_VALUE = 4;
    /**
     * <code>NODE_ALARM_INVERTED = 5;</code>
     */
    public static final int NODE_ALARM_INVERTED_VALUE = 5;
    /**
     * <code>NODE_ALARM_FALL = 6;</code>
     */
    public static final int NODE_ALARM_FALL_VALUE = 6;


    public final int getNumber() { return value; }

    public static NodeAlarm valueOf(int value) {
      switch (value) {
        case 0: return NODE_ALARM_NONE;
        case 1: return NODE_ALARM_STATIC;
        case 2: return NODE_ALARM_MOVE;
        case 3: return NODE_ALARM_COLLISION;
        case 4: return NODE_ALARM_ROLL;
        case 5: return NODE_ALARM_INVERTED;
        case 6: return NODE_ALARM_FALL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NodeAlarm>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NodeAlarm>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NodeAlarm>() {
            public NodeAlarm findValueByNumber(int number) {
              return NodeAlarm.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(6);
    }

    private static final NodeAlarm[] VALUES = values();

    public static NodeAlarm valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NodeAlarm(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NodeAlarm)
  }

  /**
   * Protobuf enum {@code SmokeCtrl}
   */
  public enum SmokeCtrl
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SMOKE_CTRL_NONE = 0;</code>
     */
    SMOKE_CTRL_NONE(0, 0),
    /**
     * <code>SMOKE_ERASURE = 1;</code>
     */
    SMOKE_ERASURE(1, 1),
    /**
     * <code>SMOKE_INSPECTION_TEST = 2;</code>
     */
    SMOKE_INSPECTION_TEST(2, 2),
    /**
     * <code>SMOKE_INSPECTION_OVER = 3;</code>
     */
    SMOKE_INSPECTION_OVER(3, 3),
    ;

    /**
     * <code>SMOKE_CTRL_NONE = 0;</code>
     */
    public static final int SMOKE_CTRL_NONE_VALUE = 0;
    /**
     * <code>SMOKE_ERASURE = 1;</code>
     */
    public static final int SMOKE_ERASURE_VALUE = 1;
    /**
     * <code>SMOKE_INSPECTION_TEST = 2;</code>
     */
    public static final int SMOKE_INSPECTION_TEST_VALUE = 2;
    /**
     * <code>SMOKE_INSPECTION_OVER = 3;</code>
     */
    public static final int SMOKE_INSPECTION_OVER_VALUE = 3;


    public final int getNumber() { return value; }

    public static SmokeCtrl valueOf(int value) {
      switch (value) {
        case 0: return SMOKE_CTRL_NONE;
        case 1: return SMOKE_ERASURE;
        case 2: return SMOKE_INSPECTION_TEST;
        case 3: return SMOKE_INSPECTION_OVER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SmokeCtrl>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SmokeCtrl>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SmokeCtrl>() {
            public SmokeCtrl findValueByNumber(int number) {
              return SmokeCtrl.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MsgNode1V1M5.getDescriptor().getEnumTypes().get(7);
    }

    private static final SmokeCtrl[] VALUES = values();

    public static SmokeCtrl valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SmokeCtrl(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SmokeCtrl)
  }

  public interface LoraParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:LoraParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bytes devEui = 1;</code>
     */
    boolean hasDevEui();
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    com.google.protobuf.ByteString getDevEui();

    /**
     * <code>optional bytes appEui = 2;</code>
     */
    boolean hasAppEui();
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    com.google.protobuf.ByteString getAppEui();

    /**
     * <code>optional bytes appKey = 3;</code>
     */
    boolean hasAppKey();
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    com.google.protobuf.ByteString getAppKey();

    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    boolean hasAppSkey();
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    com.google.protobuf.ByteString getAppSkey();

    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    boolean hasNwkSkey();
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    com.google.protobuf.ByteString getNwkSkey();

    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    boolean hasDevAddr();
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    int getDevAddr();

    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    boolean hasDatarate();
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    int getDatarate();

    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    boolean hasTxPower();
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    int getTxPower();

    /**
     * <code>optional uint32 adr = 9;</code>
     */
    boolean hasAdr();
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    int getAdr();

    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    boolean hasActivition();
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    Activtion getActivition();

    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    boolean hasClassType();
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    ClassType getClassType();

    /**
     * <code>optional uint32 delay = 12;</code>
     */
    boolean hasDelay();
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    int getDelay();

    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    java.util.List<Integer> getChannelMaskList();
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    int getChannelMaskCount();
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    int getChannelMask(int index);

    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    boolean hasMaxEIRP();
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    int getMaxEIRP();

    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    boolean hasSglStatus();
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    int getSglStatus();

    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    boolean hasSglFrequency();
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    int getSglFrequency();

    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    boolean hasSglDatarate();
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    int getSglDatarate();
  }
  /**
   * Protobuf type {@code LoraParam}
   */
  public static final class LoraParam extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:LoraParam)
      LoraParamOrBuilder {
    // Use LoraParam.newBuilder() to construct.
    private LoraParam(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LoraParam(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LoraParam defaultInstance;
    public static LoraParam getDefaultInstance() {
      return defaultInstance;
    }

    public LoraParam getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LoraParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              devEui_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              appEui_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              appKey_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              appSkey_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              nwkSkey_ = input.readBytes();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              devAddr_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              datarate_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              txPower_ = input.readSInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              adr_ = input.readUInt32();
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              Activtion value = Activtion.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                activition_ = value;
              }
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              ClassType value = ClassType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                classType_ = value;
              }
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              delay_ = input.readUInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                channelMask_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              channelMask_.add(input.readUInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                channelMask_ = new java.util.ArrayList<Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                channelMask_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              maxEIRP_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              sglStatus_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00004000;
              sglFrequency_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00008000;
              sglDatarate_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          channelMask_ = java.util.Collections.unmodifiableList(channelMask_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_LoraParam_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_LoraParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              LoraParam.class, Builder.class);
    }

    public static com.google.protobuf.Parser<LoraParam> PARSER =
        new com.google.protobuf.AbstractParser<LoraParam>() {
      public LoraParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LoraParam(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<LoraParam> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DEVEUI_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString devEui_;
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    public boolean hasDevEui() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes devEui = 1;</code>
     */
    public com.google.protobuf.ByteString getDevEui() {
      return devEui_;
    }

    public static final int APPEUI_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString appEui_;
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    public boolean hasAppEui() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes appEui = 2;</code>
     */
    public com.google.protobuf.ByteString getAppEui() {
      return appEui_;
    }

    public static final int APPKEY_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString appKey_;
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    public boolean hasAppKey() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes appKey = 3;</code>
     */
    public com.google.protobuf.ByteString getAppKey() {
      return appKey_;
    }

    public static final int APPSKEY_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString appSkey_;
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    public boolean hasAppSkey() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes appSkey = 4;</code>
     */
    public com.google.protobuf.ByteString getAppSkey() {
      return appSkey_;
    }

    public static final int NWKSKEY_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString nwkSkey_;
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    public boolean hasNwkSkey() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes nwkSkey = 5;</code>
     */
    public com.google.protobuf.ByteString getNwkSkey() {
      return nwkSkey_;
    }

    public static final int DEVADDR_FIELD_NUMBER = 6;
    private int devAddr_;
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    public boolean hasDevAddr() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 devAddr = 6;</code>
     */
    public int getDevAddr() {
      return devAddr_;
    }

    public static final int DATARATE_FIELD_NUMBER = 7;
    private int datarate_;
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    public boolean hasDatarate() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 datarate = 7;</code>
     */
    public int getDatarate() {
      return datarate_;
    }

    public static final int TXPOWER_FIELD_NUMBER = 8;
    private int txPower_;
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    public boolean hasTxPower() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 txPower = 8;</code>
     */
    public int getTxPower() {
      return txPower_;
    }

    public static final int ADR_FIELD_NUMBER = 9;
    private int adr_;
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    public boolean hasAdr() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 adr = 9;</code>
     */
    public int getAdr() {
      return adr_;
    }

    public static final int ACTIVITION_FIELD_NUMBER = 10;
    private Activtion activition_;
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    public boolean hasActivition() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .Activtion activition = 10;</code>
     */
    public Activtion getActivition() {
      return activition_;
    }

    public static final int CLASSTYPE_FIELD_NUMBER = 11;
    private ClassType classType_;
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    public boolean hasClassType() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .ClassType classType = 11;</code>
     */
    public ClassType getClassType() {
      return classType_;
    }

    public static final int DELAY_FIELD_NUMBER = 12;
    private int delay_;
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    public boolean hasDelay() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 delay = 12;</code>
     */
    public int getDelay() {
      return delay_;
    }

    public static final int CHANNELMASK_FIELD_NUMBER = 13;
    private java.util.List<Integer> channelMask_;
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    public java.util.List<Integer>
        getChannelMaskList() {
      return channelMask_;
    }
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    public int getChannelMaskCount() {
      return channelMask_.size();
    }
    /**
     * <code>repeated uint32 channelMask = 13;</code>
     */
    public int getChannelMask(int index) {
      return channelMask_.get(index);
    }

    public static final int MAXEIRP_FIELD_NUMBER = 14;
    private int maxEIRP_;
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    public boolean hasMaxEIRP() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 maxEIRP = 14;</code>
     */
    public int getMaxEIRP() {
      return maxEIRP_;
    }

    public static final int SGLSTATUS_FIELD_NUMBER = 15;
    private int sglStatus_;
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    public boolean hasSglStatus() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 sglStatus = 15;</code>
     */
    public int getSglStatus() {
      return sglStatus_;
    }

    public static final int SGLFREQUENCY_FIELD_NUMBER = 16;
    private int sglFrequency_;
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    public boolean hasSglFrequency() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 sglFrequency = 16;</code>
     */
    public int getSglFrequency() {
      return sglFrequency_;
    }

    public static final int SGLDATARATE_FIELD_NUMBER = 17;
    private int sglDatarate_;
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    public boolean hasSglDatarate() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 sglDatarate = 17;</code>
     */
    public int getSglDatarate() {
      return sglDatarate_;
    }

    private void initFields() {
      devEui_ = com.google.protobuf.ByteString.EMPTY;
      appEui_ = com.google.protobuf.ByteString.EMPTY;
      appKey_ = com.google.protobuf.ByteString.EMPTY;
      appSkey_ = com.google.protobuf.ByteString.EMPTY;
      nwkSkey_ = com.google.protobuf.ByteString.EMPTY;
      devAddr_ = 0;
      datarate_ = 0;
      txPower_ = 0;
      adr_ = 0;
      activition_ = Activtion.ABP;
      classType_ = ClassType.CLASS_A;
      delay_ = 0;
      channelMask_ = java.util.Collections.emptyList();
      maxEIRP_ = 0;
      sglStatus_ = 0;
      sglFrequency_ = 0;
      sglDatarate_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, devEui_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, appEui_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, appKey_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, appSkey_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, nwkSkey_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, devAddr_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, datarate_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, txPower_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, adr_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, activition_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, classType_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, delay_);
      }
      for (int i = 0; i < channelMask_.size(); i++) {
        output.writeUInt32(13, channelMask_.get(i));
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(14, maxEIRP_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(15, sglStatus_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(16, sglFrequency_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(17, sglDatarate_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, devEui_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, appEui_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, appKey_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, appSkey_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, nwkSkey_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, devAddr_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, datarate_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, txPower_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, adr_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, activition_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, classType_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, delay_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < channelMask_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(channelMask_.get(i));
        }
        size += dataSize;
        size += 1 * getChannelMaskList().size();
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, maxEIRP_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, sglStatus_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, sglFrequency_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, sglDatarate_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static LoraParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LoraParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LoraParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static LoraParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static LoraParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static LoraParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static LoraParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static LoraParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static LoraParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static LoraParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(LoraParam prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code LoraParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:LoraParam)
        LoraParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_LoraParam_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_LoraParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                LoraParam.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.LoraParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        devEui_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        appEui_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        appKey_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        appSkey_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        nwkSkey_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        devAddr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        datarate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        txPower_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        adr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        activition_ = Activtion.ABP;
        bitField0_ = (bitField0_ & ~0x00000200);
        classType_ = ClassType.CLASS_A;
        bitField0_ = (bitField0_ & ~0x00000400);
        delay_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        channelMask_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        maxEIRP_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        sglStatus_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        sglFrequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        sglDatarate_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_LoraParam_descriptor;
      }

      public LoraParam getDefaultInstanceForType() {
        return LoraParam.getDefaultInstance();
      }

      public LoraParam build() {
        LoraParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public LoraParam buildPartial() {
        LoraParam result = new LoraParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.devEui_ = devEui_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.appEui_ = appEui_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.appKey_ = appKey_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.appSkey_ = appSkey_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.nwkSkey_ = nwkSkey_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.devAddr_ = devAddr_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.datarate_ = datarate_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.txPower_ = txPower_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.adr_ = adr_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.activition_ = activition_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.classType_ = classType_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.delay_ = delay_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          channelMask_ = java.util.Collections.unmodifiableList(channelMask_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.channelMask_ = channelMask_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.maxEIRP_ = maxEIRP_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.sglStatus_ = sglStatus_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.sglFrequency_ = sglFrequency_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.sglDatarate_ = sglDatarate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof LoraParam) {
          return mergeFrom((LoraParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(LoraParam other) {
        if (other == LoraParam.getDefaultInstance()) return this;
        if (other.hasDevEui()) {
          setDevEui(other.getDevEui());
        }
        if (other.hasAppEui()) {
          setAppEui(other.getAppEui());
        }
        if (other.hasAppKey()) {
          setAppKey(other.getAppKey());
        }
        if (other.hasAppSkey()) {
          setAppSkey(other.getAppSkey());
        }
        if (other.hasNwkSkey()) {
          setNwkSkey(other.getNwkSkey());
        }
        if (other.hasDevAddr()) {
          setDevAddr(other.getDevAddr());
        }
        if (other.hasDatarate()) {
          setDatarate(other.getDatarate());
        }
        if (other.hasTxPower()) {
          setTxPower(other.getTxPower());
        }
        if (other.hasAdr()) {
          setAdr(other.getAdr());
        }
        if (other.hasActivition()) {
          setActivition(other.getActivition());
        }
        if (other.hasClassType()) {
          setClassType(other.getClassType());
        }
        if (other.hasDelay()) {
          setDelay(other.getDelay());
        }
        if (!other.channelMask_.isEmpty()) {
          if (channelMask_.isEmpty()) {
            channelMask_ = other.channelMask_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureChannelMaskIsMutable();
            channelMask_.addAll(other.channelMask_);
          }
          onChanged();
        }
        if (other.hasMaxEIRP()) {
          setMaxEIRP(other.getMaxEIRP());
        }
        if (other.hasSglStatus()) {
          setSglStatus(other.getSglStatus());
        }
        if (other.hasSglFrequency()) {
          setSglFrequency(other.getSglFrequency());
        }
        if (other.hasSglDatarate()) {
          setSglDatarate(other.getSglDatarate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        LoraParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (LoraParam) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString devEui_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public boolean hasDevEui() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public com.google.protobuf.ByteString getDevEui() {
        return devEui_;
      }
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public Builder setDevEui(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        devEui_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes devEui = 1;</code>
       */
      public Builder clearDevEui() {
        bitField0_ = (bitField0_ & ~0x00000001);
        devEui_ = getDefaultInstance().getDevEui();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString appEui_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public boolean hasAppEui() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public com.google.protobuf.ByteString getAppEui() {
        return appEui_;
      }
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public Builder setAppEui(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        appEui_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes appEui = 2;</code>
       */
      public Builder clearAppEui() {
        bitField0_ = (bitField0_ & ~0x00000002);
        appEui_ = getDefaultInstance().getAppEui();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString appKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public boolean hasAppKey() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public com.google.protobuf.ByteString getAppKey() {
        return appKey_;
      }
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public Builder setAppKey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        appKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes appKey = 3;</code>
       */
      public Builder clearAppKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        appKey_ = getDefaultInstance().getAppKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString appSkey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public boolean hasAppSkey() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public com.google.protobuf.ByteString getAppSkey() {
        return appSkey_;
      }
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public Builder setAppSkey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        appSkey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes appSkey = 4;</code>
       */
      public Builder clearAppSkey() {
        bitField0_ = (bitField0_ & ~0x00000008);
        appSkey_ = getDefaultInstance().getAppSkey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString nwkSkey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public boolean hasNwkSkey() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public com.google.protobuf.ByteString getNwkSkey() {
        return nwkSkey_;
      }
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public Builder setNwkSkey(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        nwkSkey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes nwkSkey = 5;</code>
       */
      public Builder clearNwkSkey() {
        bitField0_ = (bitField0_ & ~0x00000010);
        nwkSkey_ = getDefaultInstance().getNwkSkey();
        onChanged();
        return this;
      }

      private int devAddr_ ;
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public boolean hasDevAddr() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public int getDevAddr() {
        return devAddr_;
      }
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public Builder setDevAddr(int value) {
        bitField0_ |= 0x00000020;
        devAddr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 devAddr = 6;</code>
       */
      public Builder clearDevAddr() {
        bitField0_ = (bitField0_ & ~0x00000020);
        devAddr_ = 0;
        onChanged();
        return this;
      }

      private int datarate_ ;
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public boolean hasDatarate() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public int getDatarate() {
        return datarate_;
      }
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public Builder setDatarate(int value) {
        bitField0_ |= 0x00000040;
        datarate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 datarate = 7;</code>
       */
      public Builder clearDatarate() {
        bitField0_ = (bitField0_ & ~0x00000040);
        datarate_ = 0;
        onChanged();
        return this;
      }

      private int txPower_ ;
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public boolean hasTxPower() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public int getTxPower() {
        return txPower_;
      }
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public Builder setTxPower(int value) {
        bitField0_ |= 0x00000080;
        txPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 txPower = 8;</code>
       */
      public Builder clearTxPower() {
        bitField0_ = (bitField0_ & ~0x00000080);
        txPower_ = 0;
        onChanged();
        return this;
      }

      private int adr_ ;
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public boolean hasAdr() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public int getAdr() {
        return adr_;
      }
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public Builder setAdr(int value) {
        bitField0_ |= 0x00000100;
        adr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 adr = 9;</code>
       */
      public Builder clearAdr() {
        bitField0_ = (bitField0_ & ~0x00000100);
        adr_ = 0;
        onChanged();
        return this;
      }

      private Activtion activition_ = Activtion.ABP;
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public boolean hasActivition() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public Activtion getActivition() {
        return activition_;
      }
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public Builder setActivition(Activtion value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        activition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Activtion activition = 10;</code>
       */
      public Builder clearActivition() {
        bitField0_ = (bitField0_ & ~0x00000200);
        activition_ = Activtion.ABP;
        onChanged();
        return this;
      }

      private ClassType classType_ = ClassType.CLASS_A;
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public boolean hasClassType() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public ClassType getClassType() {
        return classType_;
      }
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public Builder setClassType(ClassType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        classType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .ClassType classType = 11;</code>
       */
      public Builder clearClassType() {
        bitField0_ = (bitField0_ & ~0x00000400);
        classType_ = ClassType.CLASS_A;
        onChanged();
        return this;
      }

      private int delay_ ;
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public int getDelay() {
        return delay_;
      }
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public Builder setDelay(int value) {
        bitField0_ |= 0x00000800;
        delay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 delay = 12;</code>
       */
      public Builder clearDelay() {
        bitField0_ = (bitField0_ & ~0x00000800);
        delay_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<Integer> channelMask_ = java.util.Collections.emptyList();
      private void ensureChannelMaskIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          channelMask_ = new java.util.ArrayList<Integer>(channelMask_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public java.util.List<Integer>
          getChannelMaskList() {
        return java.util.Collections.unmodifiableList(channelMask_);
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public int getChannelMaskCount() {
        return channelMask_.size();
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public int getChannelMask(int index) {
        return channelMask_.get(index);
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder setChannelMask(
          int index, int value) {
        ensureChannelMaskIsMutable();
        channelMask_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder addChannelMask(int value) {
        ensureChannelMaskIsMutable();
        channelMask_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder addAllChannelMask(
          Iterable<? extends Integer> values) {
        ensureChannelMaskIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, channelMask_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 channelMask = 13;</code>
       */
      public Builder clearChannelMask() {
        channelMask_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private int maxEIRP_ ;
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public boolean hasMaxEIRP() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public int getMaxEIRP() {
        return maxEIRP_;
      }
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public Builder setMaxEIRP(int value) {
        bitField0_ |= 0x00002000;
        maxEIRP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxEIRP = 14;</code>
       */
      public Builder clearMaxEIRP() {
        bitField0_ = (bitField0_ & ~0x00002000);
        maxEIRP_ = 0;
        onChanged();
        return this;
      }

      private int sglStatus_ ;
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public boolean hasSglStatus() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public int getSglStatus() {
        return sglStatus_;
      }
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public Builder setSglStatus(int value) {
        bitField0_ |= 0x00004000;
        sglStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sglStatus = 15;</code>
       */
      public Builder clearSglStatus() {
        bitField0_ = (bitField0_ & ~0x00004000);
        sglStatus_ = 0;
        onChanged();
        return this;
      }

      private int sglFrequency_ ;
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public boolean hasSglFrequency() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public int getSglFrequency() {
        return sglFrequency_;
      }
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public Builder setSglFrequency(int value) {
        bitField0_ |= 0x00008000;
        sglFrequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sglFrequency = 16;</code>
       */
      public Builder clearSglFrequency() {
        bitField0_ = (bitField0_ & ~0x00008000);
        sglFrequency_ = 0;
        onChanged();
        return this;
      }

      private int sglDatarate_ ;
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public boolean hasSglDatarate() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public int getSglDatarate() {
        return sglDatarate_;
      }
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public Builder setSglDatarate(int value) {
        bitField0_ |= 0x00010000;
        sglDatarate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sglDatarate = 17;</code>
       */
      public Builder clearSglDatarate() {
        bitField0_ = (bitField0_ & ~0x00010000);
        sglDatarate_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:LoraParam)
    }

    static {
      defaultInstance = new LoraParam(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:LoraParam)
  }

  public interface BleParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:BleParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float bleInterval = 1;</code>
     */
    boolean hasBleInterval();
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    float getBleInterval();

    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    boolean hasBleTxp();
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    int getBleTxp();

    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    boolean hasBleOnTime();
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    int getBleOnTime();

    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    boolean hasBleOffTime();
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    int getBleOffTime();

    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    boolean hasBleOnOff();
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    int getBleOnOff();
  }
  /**
   * Protobuf type {@code BleParam}
   */
  public static final class BleParam extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:BleParam)
      BleParamOrBuilder {
    // Use BleParam.newBuilder() to construct.
    private BleParam(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BleParam(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BleParam defaultInstance;
    public static BleParam getDefaultInstance() {
      return defaultInstance;
    }

    public BleParam getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BleParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              bleInterval_ = input.readFloat();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bleTxp_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bleOnTime_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bleOffTime_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              bleOnOff_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_BleParam_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_BleParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              BleParam.class, Builder.class);
    }

    public static com.google.protobuf.Parser<BleParam> PARSER =
        new com.google.protobuf.AbstractParser<BleParam>() {
      public BleParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BleParam(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<BleParam> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BLEINTERVAL_FIELD_NUMBER = 1;
    private float bleInterval_;
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    public boolean hasBleInterval() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float bleInterval = 1;</code>
     */
    public float getBleInterval() {
      return bleInterval_;
    }

    public static final int BLETXP_FIELD_NUMBER = 2;
    private int bleTxp_;
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    public boolean hasBleTxp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 bleTxp = 2;</code>
     */
    public int getBleTxp() {
      return bleTxp_;
    }

    public static final int BLEONTIME_FIELD_NUMBER = 3;
    private int bleOnTime_;
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    public boolean hasBleOnTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 bleOnTime = 3;</code>
     */
    public int getBleOnTime() {
      return bleOnTime_;
    }

    public static final int BLEOFFTIME_FIELD_NUMBER = 4;
    private int bleOffTime_;
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    public boolean hasBleOffTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 bleOffTime = 4;</code>
     */
    public int getBleOffTime() {
      return bleOffTime_;
    }

    public static final int BLEONOFF_FIELD_NUMBER = 5;
    private int bleOnOff_;
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    public boolean hasBleOnOff() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 bleOnOff = 5;</code>
     */
    public int getBleOnOff() {
      return bleOnOff_;
    }

    private void initFields() {
      bleInterval_ = 0F;
      bleTxp_ = 0;
      bleOnTime_ = 0;
      bleOffTime_ = 0;
      bleOnOff_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, bleInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, bleTxp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, bleOnTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, bleOffTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, bleOnOff_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, bleInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, bleTxp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bleOnTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, bleOffTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, bleOnOff_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static BleParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static BleParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static BleParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static BleParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static BleParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static BleParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static BleParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static BleParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static BleParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static BleParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(BleParam prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code BleParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:BleParam)
        BleParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_BleParam_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_BleParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                BleParam.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.BleParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bleInterval_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        bleTxp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bleOnTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bleOffTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        bleOnOff_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_BleParam_descriptor;
      }

      public BleParam getDefaultInstanceForType() {
        return BleParam.getDefaultInstance();
      }

      public BleParam build() {
        BleParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public BleParam buildPartial() {
        BleParam result = new BleParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.bleInterval_ = bleInterval_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bleTxp_ = bleTxp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bleOnTime_ = bleOnTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bleOffTime_ = bleOffTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bleOnOff_ = bleOnOff_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof BleParam) {
          return mergeFrom((BleParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(BleParam other) {
        if (other == BleParam.getDefaultInstance()) return this;
        if (other.hasBleInterval()) {
          setBleInterval(other.getBleInterval());
        }
        if (other.hasBleTxp()) {
          setBleTxp(other.getBleTxp());
        }
        if (other.hasBleOnTime()) {
          setBleOnTime(other.getBleOnTime());
        }
        if (other.hasBleOffTime()) {
          setBleOffTime(other.getBleOffTime());
        }
        if (other.hasBleOnOff()) {
          setBleOnOff(other.getBleOnOff());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        BleParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (BleParam) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float bleInterval_ ;
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public boolean hasBleInterval() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public float getBleInterval() {
        return bleInterval_;
      }
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public Builder setBleInterval(float value) {
        bitField0_ |= 0x00000001;
        bleInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bleInterval = 1;</code>
       */
      public Builder clearBleInterval() {
        bitField0_ = (bitField0_ & ~0x00000001);
        bleInterval_ = 0F;
        onChanged();
        return this;
      }

      private int bleTxp_ ;
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public boolean hasBleTxp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public int getBleTxp() {
        return bleTxp_;
      }
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public Builder setBleTxp(int value) {
        bitField0_ |= 0x00000002;
        bleTxp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 bleTxp = 2;</code>
       */
      public Builder clearBleTxp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bleTxp_ = 0;
        onChanged();
        return this;
      }

      private int bleOnTime_ ;
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public boolean hasBleOnTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public int getBleOnTime() {
        return bleOnTime_;
      }
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public Builder setBleOnTime(int value) {
        bitField0_ |= 0x00000004;
        bleOnTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleOnTime = 3;</code>
       */
      public Builder clearBleOnTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bleOnTime_ = 0;
        onChanged();
        return this;
      }

      private int bleOffTime_ ;
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public boolean hasBleOffTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public int getBleOffTime() {
        return bleOffTime_;
      }
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public Builder setBleOffTime(int value) {
        bitField0_ |= 0x00000008;
        bleOffTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleOffTime = 4;</code>
       */
      public Builder clearBleOffTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bleOffTime_ = 0;
        onChanged();
        return this;
      }

      private int bleOnOff_ ;
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public boolean hasBleOnOff() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public int getBleOnOff() {
        return bleOnOff_;
      }
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public Builder setBleOnOff(int value) {
        bitField0_ |= 0x00000010;
        bleOnOff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bleOnOff = 5;</code>
       */
      public Builder clearBleOnOff() {
        bitField0_ = (bitField0_ & ~0x00000010);
        bleOnOff_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:BleParam)
    }

    static {
      defaultInstance = new BleParam(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:BleParam)
  }

  public interface SensorDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SensorData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float data = 1;</code>
     */
    boolean hasData();
    /**
     * <code>optional float data = 1;</code>
     */
    float getData();

    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    float getAlarmHigh();

    /**
     * <code>optional float alarmLow = 3;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    float getAlarmLow();

    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    int getCalibration();

    /**
     * <code>optional .SensorError error = 5;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    SensorError getError();
  }
  /**
   * Protobuf type {@code SensorData}
   */
  public static final class SensorData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:SensorData)
      SensorDataOrBuilder {
    // Use SensorData.newBuilder() to construct.
    private SensorData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorData defaultInstance;
    public static SensorData getDefaultInstance() {
      return defaultInstance;
    }

    public SensorData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              data_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              alarmHigh_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              alarmLow_ = input.readFloat();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              calibration_ = input.readUInt32();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                error_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_SensorData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_SensorData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SensorData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SensorData> PARSER =
        new com.google.protobuf.AbstractParser<SensorData>() {
      public SensorData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SensorData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DATA_FIELD_NUMBER = 1;
    private float data_;
    /**
     * <code>optional float data = 1;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float data = 1;</code>
     */
    public float getData() {
      return data_;
    }

    public static final int ALARMHIGH_FIELD_NUMBER = 2;
    private float alarmHigh_;
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float alarmHigh = 2;</code>
     */
    public float getAlarmHigh() {
      return alarmHigh_;
    }

    public static final int ALARMLOW_FIELD_NUMBER = 3;
    private float alarmLow_;
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float alarmLow = 3;</code>
     */
    public float getAlarmLow() {
      return alarmLow_;
    }

    public static final int CALIBRATION_FIELD_NUMBER = 4;
    private int calibration_;
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 calibration = 4;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    public static final int ERROR_FIELD_NUMBER = 5;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .SensorError error = 5;</code>
     */
    public SensorError getError() {
      return error_;
    }

    private void initFields() {
      data_ = 0F;
      alarmHigh_ = 0F;
      alarmLow_ = 0F;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, data_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, calibration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, error_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, data_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, alarmHigh_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, alarmLow_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, calibration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, error_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SensorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SensorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SensorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SensorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SensorData)
        SensorDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_SensorData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_SensorData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SensorData.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.SensorData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        data_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        alarmHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_SensorData_descriptor;
      }

      public SensorData getDefaultInstanceForType() {
        return SensorData.getDefaultInstance();
      }

      public SensorData build() {
        SensorData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SensorData buildPartial() {
        SensorData result = new SensorData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorData) {
          return mergeFrom((SensorData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SensorData other) {
        if (other == SensorData.getDefaultInstance()) return this;
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SensorData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SensorData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float data_ ;
      /**
       * <code>optional float data = 1;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float data = 1;</code>
       */
      public float getData() {
        return data_;
      }
      /**
       * <code>optional float data = 1;</code>
       */
      public Builder setData(float value) {
        bitField0_ |= 0x00000001;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float data = 1;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = 0F;
        onChanged();
        return this;
      }

      private float alarmHigh_ ;
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public float getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public Builder setAlarmHigh(float value) {
        bitField0_ |= 0x00000002;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmHigh = 2;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0F;
        onChanged();
        return this;
      }

      private float alarmLow_ ;
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public float getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public Builder setAlarmLow(float value) {
        bitField0_ |= 0x00000004;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmLow = 3;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0F;
        onChanged();
        return this;
      }

      private int calibration_ ;
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000008;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 calibration = 4;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        onChanged();
        return this;
      }

      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 5;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorData)
    }

    static {
      defaultInstance = new SensorData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorData)
  }

  public interface SensorDataIntOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SensorDataInt)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SensorType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    SensorType getType();

    /**
     * <code>optional sint32 data = 2;</code>
     */
    boolean hasData();
    /**
     * <code>optional sint32 data = 2;</code>
     */
    int getData();

    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    int getAlarmHigh();

    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    int getAlarmLow();

    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    int getCalibration();

    /**
     * <code>optional .SensorError error = 6;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    SensorError getError();
  }
  /**
   * Protobuf type {@code SensorDataInt}
   */
  public static final class SensorDataInt extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:SensorDataInt)
      SensorDataIntOrBuilder {
    // Use SensorDataInt.newBuilder() to construct.
    private SensorDataInt(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorDataInt(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorDataInt defaultInstance;
    public static SensorDataInt getDefaultInstance() {
      return defaultInstance;
    }

    public SensorDataInt getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorDataInt(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              SensorType value = SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              data_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              alarmHigh_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              alarmLow_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              calibration_ = input.readSInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                error_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_SensorDataInt_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_SensorDataInt_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SensorDataInt.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SensorDataInt> PARSER =
        new com.google.protobuf.AbstractParser<SensorDataInt>() {
      public SensorDataInt parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorDataInt(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SensorDataInt> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private SensorType type_;
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public SensorType getType() {
      return type_;
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private int data_;
    /**
     * <code>optional sint32 data = 2;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 data = 2;</code>
     */
    public int getData() {
      return data_;
    }

    public static final int ALARMHIGH_FIELD_NUMBER = 3;
    private int alarmHigh_;
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 alarmHigh = 3;</code>
     */
    public int getAlarmHigh() {
      return alarmHigh_;
    }

    public static final int ALARMLOW_FIELD_NUMBER = 4;
    private int alarmLow_;
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 alarmLow = 4;</code>
     */
    public int getAlarmLow() {
      return alarmLow_;
    }

    public static final int CALIBRATION_FIELD_NUMBER = 5;
    private int calibration_;
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    public static final int ERROR_FIELD_NUMBER = 6;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public SensorError getError() {
      return error_;
    }

    private void initFields() {
      type_ = SensorType.SENSOR_TYPE_TEMP;
      data_ = 0;
      alarmHigh_ = 0;
      alarmLow_ = 0;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, error_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, error_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SensorDataInt parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataInt parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataInt parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataInt parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataInt parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataInt parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SensorDataInt parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SensorDataInt parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SensorDataInt parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataInt parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorDataInt prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorDataInt}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SensorDataInt)
        SensorDataIntOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_SensorDataInt_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_SensorDataInt_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SensorDataInt.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.SensorDataInt.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = SensorType.SENSOR_TYPE_TEMP;
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_SensorDataInt_descriptor;
      }

      public SensorDataInt getDefaultInstanceForType() {
        return SensorDataInt.getDefaultInstance();
      }

      public SensorDataInt build() {
        SensorDataInt result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SensorDataInt buildPartial() {
        SensorDataInt result = new SensorDataInt(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorDataInt) {
          return mergeFrom((SensorDataInt)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SensorDataInt other) {
        if (other == SensorDataInt.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SensorDataInt parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SensorDataInt) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SensorType type_ = SensorType.SENSOR_TYPE_TEMP;
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public SensorType getType() {
        return type_;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder setType(SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = SensorType.SENSOR_TYPE_TEMP;
        onChanged();
        return this;
      }

      private int data_ ;
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public int getData() {
        return data_;
      }
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public Builder setData(int value) {
        bitField0_ |= 0x00000002;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 data = 2;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = 0;
        onChanged();
        return this;
      }

      private int alarmHigh_ ;
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public int getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public Builder setAlarmHigh(int value) {
        bitField0_ |= 0x00000004;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmHigh = 3;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmHigh_ = 0;
        onChanged();
        return this;
      }

      private int alarmLow_ ;
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public int getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public Builder setAlarmLow(int value) {
        bitField0_ |= 0x00000008;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 alarmLow = 4;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        alarmLow_ = 0;
        onChanged();
        return this;
      }

      private int calibration_ ;
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000010;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        calibration_ = 0;
        onChanged();
        return this;
      }

      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000020);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorDataInt)
    }

    static {
      defaultInstance = new SensorDataInt(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorDataInt)
  }

  public interface SensorDataFloatOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SensorDataFloat)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .SensorType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    SensorType getType();

    /**
     * <code>optional float data = 2;</code>
     */
    boolean hasData();
    /**
     * <code>optional float data = 2;</code>
     */
    float getData();

    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    boolean hasAlarmHigh();
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    float getAlarmHigh();

    /**
     * <code>optional float alarmLow = 4;</code>
     */
    boolean hasAlarmLow();
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    float getAlarmLow();

    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    boolean hasCalibration();
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    int getCalibration();

    /**
     * <code>optional .SensorError error = 6;</code>
     */
    boolean hasError();
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    SensorError getError();
  }
  /**
   * Protobuf type {@code SensorDataFloat}
   */
  public static final class SensorDataFloat extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:SensorDataFloat)
      SensorDataFloatOrBuilder {
    // Use SensorDataFloat.newBuilder() to construct.
    private SensorDataFloat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorDataFloat(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorDataFloat defaultInstance;
    public static SensorDataFloat getDefaultInstance() {
      return defaultInstance;
    }

    public SensorDataFloat getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorDataFloat(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              SensorType value = SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              data_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              alarmHigh_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              alarmLow_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              calibration_ = input.readSInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              SensorError value = SensorError.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                error_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_SensorDataFloat_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_SensorDataFloat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SensorDataFloat.class, Builder.class);
    }

    public static com.google.protobuf.Parser<SensorDataFloat> PARSER =
        new com.google.protobuf.AbstractParser<SensorDataFloat>() {
      public SensorDataFloat parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorDataFloat(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<SensorDataFloat> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private SensorType type_;
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorType type = 1;</code>
     */
    public SensorType getType() {
      return type_;
    }

    public static final int DATA_FIELD_NUMBER = 2;
    private float data_;
    /**
     * <code>optional float data = 2;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float data = 2;</code>
     */
    public float getData() {
      return data_;
    }

    public static final int ALARMHIGH_FIELD_NUMBER = 3;
    private float alarmHigh_;
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    public boolean hasAlarmHigh() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float alarmHigh = 3;</code>
     */
    public float getAlarmHigh() {
      return alarmHigh_;
    }

    public static final int ALARMLOW_FIELD_NUMBER = 4;
    private float alarmLow_;
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    public boolean hasAlarmLow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float alarmLow = 4;</code>
     */
    public float getAlarmLow() {
      return alarmLow_;
    }

    public static final int CALIBRATION_FIELD_NUMBER = 5;
    private int calibration_;
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 calibration = 5;</code>
     */
    public int getCalibration() {
      return calibration_;
    }

    public static final int ERROR_FIELD_NUMBER = 6;
    private SensorError error_;
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .SensorError error = 6;</code>
     */
    public SensorError getError() {
      return error_;
    }

    private void initFields() {
      type_ = SensorType.SENSOR_TYPE_TEMP;
      data_ = 0F;
      alarmHigh_ = 0F;
      alarmLow_ = 0F;
      calibration_ = 0;
      error_ = SensorError.SENSOR_ERR_NONE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, error_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, data_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, alarmHigh_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, alarmLow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, calibration_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, error_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static SensorDataFloat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataFloat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataFloat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SensorDataFloat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SensorDataFloat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataFloat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static SensorDataFloat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static SensorDataFloat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static SensorDataFloat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static SensorDataFloat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SensorDataFloat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorDataFloat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SensorDataFloat)
        SensorDataFloatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_SensorDataFloat_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_SensorDataFloat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SensorDataFloat.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.SensorDataFloat.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = SensorType.SENSOR_TYPE_TEMP;
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        alarmHigh_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmLow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        error_ = SensorError.SENSOR_ERR_NONE;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_SensorDataFloat_descriptor;
      }

      public SensorDataFloat getDefaultInstanceForType() {
        return SensorDataFloat.getDefaultInstance();
      }

      public SensorDataFloat build() {
        SensorDataFloat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public SensorDataFloat buildPartial() {
        SensorDataFloat result = new SensorDataFloat(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.alarmHigh_ = alarmHigh_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.alarmLow_ = alarmLow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.error_ = error_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SensorDataFloat) {
          return mergeFrom((SensorDataFloat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SensorDataFloat other) {
        if (other == SensorDataFloat.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasAlarmHigh()) {
          setAlarmHigh(other.getAlarmHigh());
        }
        if (other.hasAlarmLow()) {
          setAlarmLow(other.getAlarmLow());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasError()) {
          setError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SensorDataFloat parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SensorDataFloat) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private SensorType type_ = SensorType.SENSOR_TYPE_TEMP;
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public SensorType getType() {
        return type_;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder setType(SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = SensorType.SENSOR_TYPE_TEMP;
        onChanged();
        return this;
      }

      private float data_ ;
      /**
       * <code>optional float data = 2;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float data = 2;</code>
       */
      public float getData() {
        return data_;
      }
      /**
       * <code>optional float data = 2;</code>
       */
      public Builder setData(float value) {
        bitField0_ |= 0x00000002;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float data = 2;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = 0F;
        onChanged();
        return this;
      }

      private float alarmHigh_ ;
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public boolean hasAlarmHigh() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public float getAlarmHigh() {
        return alarmHigh_;
      }
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public Builder setAlarmHigh(float value) {
        bitField0_ |= 0x00000004;
        alarmHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmHigh = 3;</code>
       */
      public Builder clearAlarmHigh() {
        bitField0_ = (bitField0_ & ~0x00000004);
        alarmHigh_ = 0F;
        onChanged();
        return this;
      }

      private float alarmLow_ ;
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public boolean hasAlarmLow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public float getAlarmLow() {
        return alarmLow_;
      }
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public Builder setAlarmLow(float value) {
        bitField0_ |= 0x00000008;
        alarmLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alarmLow = 4;</code>
       */
      public Builder clearAlarmLow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        alarmLow_ = 0F;
        onChanged();
        return this;
      }

      private int calibration_ ;
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000010;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 calibration = 5;</code>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        calibration_ = 0;
        onChanged();
        return this;
      }

      private SensorError error_ = SensorError.SENSOR_ERR_NONE;
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public boolean hasError() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public SensorError getError() {
        return error_;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder setError(SensorError value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        error_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SensorError error = 6;</code>
       */
      public Builder clearError() {
        bitField0_ = (bitField0_ & ~0x00000020);
        error_ = SensorError.SENSOR_ERR_NONE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorDataFloat)
    }

    static {
      defaultInstance = new SensorDataFloat(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorDataFloat)
  }

  public interface GpsDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:GpsData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double latitude = 1;</code>
     */
    boolean hasLatitude();
    /**
     * <code>optional double latitude = 1;</code>
     */
    double getLatitude();

    /**
     * <code>optional double longitude = 2;</code>
     */
    boolean hasLongitude();
    /**
     * <code>optional double longitude = 2;</code>
     */
    double getLongitude();

    /**
     * <code>optional double altitude = 3;</code>
     */
    boolean hasAltitude();
    /**
     * <code>optional double altitude = 3;</code>
     */
    double getAltitude();
  }
  /**
   * Protobuf type {@code GpsData}
   */
  public static final class GpsData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:GpsData)
      GpsDataOrBuilder {
    // Use GpsData.newBuilder() to construct.
    private GpsData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GpsData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GpsData defaultInstance;
    public static GpsData getDefaultInstance() {
      return defaultInstance;
    }

    public GpsData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GpsData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              latitude_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              longitude_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              altitude_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_GpsData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_GpsData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              GpsData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<GpsData> PARSER =
        new com.google.protobuf.AbstractParser<GpsData>() {
      public GpsData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GpsData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<GpsData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LATITUDE_FIELD_NUMBER = 1;
    private double latitude_;
    /**
     * <code>optional double latitude = 1;</code>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double latitude = 1;</code>
     */
    public double getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private double longitude_;
    /**
     * <code>optional double longitude = 2;</code>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double longitude = 2;</code>
     */
    public double getLongitude() {
      return longitude_;
    }

    public static final int ALTITUDE_FIELD_NUMBER = 3;
    private double altitude_;
    /**
     * <code>optional double altitude = 3;</code>
     */
    public boolean hasAltitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double altitude = 3;</code>
     */
    public double getAltitude() {
      return altitude_;
    }

    private void initFields() {
      latitude_ = 0D;
      longitude_ = 0D;
      altitude_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, altitude_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, altitude_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static GpsData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GpsData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GpsData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GpsData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GpsData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static GpsData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static GpsData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static GpsData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static GpsData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static GpsData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(GpsData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code GpsData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:GpsData)
        GpsDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_GpsData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_GpsData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                GpsData.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.GpsData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        latitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        longitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        altitude_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_GpsData_descriptor;
      }

      public GpsData getDefaultInstanceForType() {
        return GpsData.getDefaultInstance();
      }

      public GpsData build() {
        GpsData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public GpsData buildPartial() {
        GpsData result = new GpsData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.altitude_ = altitude_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof GpsData) {
          return mergeFrom((GpsData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(GpsData other) {
        if (other == GpsData.getDefaultInstance()) return this;
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasAltitude()) {
          setAltitude(other.getAltitude());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        GpsData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (GpsData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double latitude_ ;
      /**
       * <code>optional double latitude = 1;</code>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double latitude = 1;</code>
       */
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <code>optional double latitude = 1;</code>
       */
      public Builder setLatitude(double value) {
        bitField0_ |= 0x00000001;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double latitude = 1;</code>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0D;
        onChanged();
        return this;
      }

      private double longitude_ ;
      /**
       * <code>optional double longitude = 2;</code>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double longitude = 2;</code>
       */
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <code>optional double longitude = 2;</code>
       */
      public Builder setLongitude(double value) {
        bitField0_ |= 0x00000002;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double longitude = 2;</code>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0D;
        onChanged();
        return this;
      }

      private double altitude_ ;
      /**
       * <code>optional double altitude = 3;</code>
       */
      public boolean hasAltitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double altitude = 3;</code>
       */
      public double getAltitude() {
        return altitude_;
      }
      /**
       * <code>optional double altitude = 3;</code>
       */
      public Builder setAltitude(double value) {
        bitField0_ |= 0x00000004;
        altitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double altitude = 3;</code>
       */
      public Builder clearAltitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        altitude_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:GpsData)
    }

    static {
      defaultInstance = new GpsData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:GpsData)
  }

  public interface AxisDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AxisData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>optional float x = 1;</code>
     */
    float getX();

    /**
     * <code>optional float y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>optional float y = 2;</code>
     */
    float getY();

    /**
     * <code>optional float z = 3;</code>
     */
    boolean hasZ();
    /**
     * <code>optional float z = 3;</code>
     */
    float getZ();
  }
  /**
   * Protobuf type {@code AxisData}
   */
  public static final class AxisData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AxisData)
      AxisDataOrBuilder {
    // Use AxisData.newBuilder() to construct.
    private AxisData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AxisData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AxisData defaultInstance;
    public static AxisData getDefaultInstance() {
      return defaultInstance;
    }

    public AxisData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AxisData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              x_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              y_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              z_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_AxisData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_AxisData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AxisData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<AxisData> PARSER =
        new com.google.protobuf.AbstractParser<AxisData>() {
      public AxisData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AxisData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<AxisData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int X_FIELD_NUMBER = 1;
    private float x_;
    /**
     * <code>optional float x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float x = 1;</code>
     */
    public float getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private float y_;
    /**
     * <code>optional float y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float y = 2;</code>
     */
    public float getY() {
      return y_;
    }

    public static final int Z_FIELD_NUMBER = 3;
    private float z_;
    /**
     * <code>optional float z = 3;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float z = 3;</code>
     */
    public float getZ() {
      return z_;
    }

    private void initFields() {
      x_ = 0F;
      y_ = 0F;
      z_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, z_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, z_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AxisData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AxisData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AxisData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AxisData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AxisData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AxisData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AxisData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AxisData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AxisData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AxisData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AxisData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AxisData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AxisData)
        AxisDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_AxisData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_AxisData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AxisData.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.AxisData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_AxisData_descriptor;
      }

      public AxisData getDefaultInstanceForType() {
        return AxisData.getDefaultInstance();
      }

      public AxisData build() {
        AxisData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AxisData buildPartial() {
        AxisData result = new AxisData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.z_ = z_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AxisData) {
          return mergeFrom((AxisData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AxisData other) {
        if (other == AxisData.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AxisData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AxisData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float x_ ;
      /**
       * <code>optional float x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public float getX() {
        return x_;
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public Builder setX(float value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        onChanged();
        return this;
      }

      private float y_ ;
      /**
       * <code>optional float y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public float getY() {
        return y_;
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public Builder setY(float value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        onChanged();
        return this;
      }

      private float z_ ;
      /**
       * <code>optional float z = 3;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float z = 3;</code>
       */
      public float getZ() {
        return z_;
      }
      /**
       * <code>optional float z = 3;</code>
       */
      public Builder setZ(float value) {
        bitField0_ |= 0x00000004;
        z_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float z = 3;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AxisData)
    }

    static {
      defaultInstance = new AxisData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AxisData)
  }

  public interface AppParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AppParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .AppCmd cmd = 1;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     */
    AppCmd getCmd();

    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     */
    boolean hasUploadInterval();
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     */
    int getUploadInterval();

    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    boolean hasSyncTime();
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    int getSyncTime();

    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    boolean hasNodeState();
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    NodeState getNodeState();

    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    boolean hasNodeAlarm();
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    NodeAlarm getNodeAlarm();

    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    boolean hasNodeAlarmSet();
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    int getNodeAlarmSet();

    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    boolean hasConfirm();
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    int getConfirm();

    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    boolean hasSmokeCtrl();
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    SmokeCtrl getSmokeCtrl();

    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     */
    boolean hasUploadRepeat();
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     */
    int getUploadRepeat();

    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     */
    boolean hasAlarmUploadInterval();
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     */
    int getAlarmUploadInterval();

    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     */
    boolean hasAlarmUploadNb();
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     */
    int getAlarmUploadNb();
  }
  /**
   * Protobuf type {@code AppParam}
   */
  public static final class AppParam extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:AppParam)
      AppParamOrBuilder {
    // Use AppParam.newBuilder() to construct.
    private AppParam(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AppParam(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AppParam defaultInstance;
    public static AppParam getDefaultInstance() {
      return defaultInstance;
    }

    public AppParam getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AppParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              AppCmd value = AppCmd.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                cmd_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              uploadInterval_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              syncTime_ = input.readUInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              NodeState value = NodeState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                nodeState_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              NodeAlarm value = NodeAlarm.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                nodeAlarm_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              nodeAlarmSet_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              confirm_ = input.readUInt32();
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              SmokeCtrl value = SmokeCtrl.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                smokeCtrl_ = value;
              }
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              uploadRepeat_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              alarmUploadInterval_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              alarmUploadNb_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_AppParam_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_AppParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AppParam.class, Builder.class);
    }

    public static com.google.protobuf.Parser<AppParam> PARSER =
        new com.google.protobuf.AbstractParser<AppParam>() {
      public AppParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AppParam(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<AppParam> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CMD_FIELD_NUMBER = 1;
    private AppCmd cmd_;
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .AppCmd cmd = 1;</code>
     */
    public AppCmd getCmd() {
      return cmd_;
    }

    public static final int UPLOADINTERVAL_FIELD_NUMBER = 2;
    private int uploadInterval_;
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     */
    public boolean hasUploadInterval() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 uploadInterval = 2;</code>
     */
    public int getUploadInterval() {
      return uploadInterval_;
    }

    public static final int SYNCTIME_FIELD_NUMBER = 3;
    private int syncTime_;
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    public boolean hasSyncTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 syncTime = 3;</code>
     */
    public int getSyncTime() {
      return syncTime_;
    }

    public static final int NODESTATE_FIELD_NUMBER = 4;
    private NodeState nodeState_;
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    public boolean hasNodeState() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .NodeState nodeState = 4;</code>
     */
    public NodeState getNodeState() {
      return nodeState_;
    }

    public static final int NODEALARM_FIELD_NUMBER = 5;
    private NodeAlarm nodeAlarm_;
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    public boolean hasNodeAlarm() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .NodeAlarm nodeAlarm = 5;</code>
     */
    public NodeAlarm getNodeAlarm() {
      return nodeAlarm_;
    }

    public static final int NODEALARMSET_FIELD_NUMBER = 6;
    private int nodeAlarmSet_;
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    public boolean hasNodeAlarmSet() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 nodeAlarmSet = 6;</code>
     */
    public int getNodeAlarmSet() {
      return nodeAlarmSet_;
    }

    public static final int CONFIRM_FIELD_NUMBER = 7;
    private int confirm_;
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    public boolean hasConfirm() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 confirm = 7;</code>
     */
    public int getConfirm() {
      return confirm_;
    }

    public static final int SMOKECTRL_FIELD_NUMBER = 8;
    private SmokeCtrl smokeCtrl_;
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    public boolean hasSmokeCtrl() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
     */
    public SmokeCtrl getSmokeCtrl() {
      return smokeCtrl_;
    }

    public static final int UPLOADREPEAT_FIELD_NUMBER = 9;
    private int uploadRepeat_;
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     */
    public boolean hasUploadRepeat() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 uploadRepeat = 9;</code>
     */
    public int getUploadRepeat() {
      return uploadRepeat_;
    }

    public static final int ALARMUPLOADINTERVAL_FIELD_NUMBER = 10;
    private int alarmUploadInterval_;
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     */
    public boolean hasAlarmUploadInterval() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 alarmUploadInterval = 10;</code>
     */
    public int getAlarmUploadInterval() {
      return alarmUploadInterval_;
    }

    public static final int ALARMUPLOADNB_FIELD_NUMBER = 11;
    private int alarmUploadNb_;
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     */
    public boolean hasAlarmUploadNb() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 alarmUploadNb = 11;</code>
     */
    public int getAlarmUploadNb() {
      return alarmUploadNb_;
    }

    private void initFields() {
      cmd_ = AppCmd.APP_CMD_NONE;
      uploadInterval_ = 0;
      syncTime_ = 0;
      nodeState_ = NodeState.NODE_STATE_UNKNOWN;
      nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
      nodeAlarmSet_ = 0;
      confirm_ = 0;
      smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
      uploadRepeat_ = 0;
      alarmUploadInterval_ = 0;
      alarmUploadNb_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, cmd_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, uploadInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, syncTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, nodeState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, nodeAlarm_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, nodeAlarmSet_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, confirm_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, smokeCtrl_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, uploadRepeat_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, alarmUploadInterval_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, alarmUploadNb_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, cmd_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, uploadInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, syncTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, nodeState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, nodeAlarm_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, nodeAlarmSet_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, confirm_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, smokeCtrl_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, uploadRepeat_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, alarmUploadInterval_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, alarmUploadNb_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static AppParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AppParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AppParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AppParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AppParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AppParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static AppParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static AppParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static AppParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static AppParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(AppParam prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AppParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AppParam)
        AppParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_AppParam_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_AppParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AppParam.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.AppParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cmd_ = AppCmd.APP_CMD_NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        uploadInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        syncTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        nodeState_ = NodeState.NODE_STATE_UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000008);
        nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        nodeAlarmSet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        confirm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
        bitField0_ = (bitField0_ & ~0x00000080);
        uploadRepeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        alarmUploadInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        alarmUploadNb_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_AppParam_descriptor;
      }

      public AppParam getDefaultInstanceForType() {
        return AppParam.getDefaultInstance();
      }

      public AppParam build() {
        AppParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public AppParam buildPartial() {
        AppParam result = new AppParam(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.uploadInterval_ = uploadInterval_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.syncTime_ = syncTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nodeState_ = nodeState_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.nodeAlarm_ = nodeAlarm_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.nodeAlarmSet_ = nodeAlarmSet_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.confirm_ = confirm_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.smokeCtrl_ = smokeCtrl_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.uploadRepeat_ = uploadRepeat_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.alarmUploadInterval_ = alarmUploadInterval_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.alarmUploadNb_ = alarmUploadNb_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AppParam) {
          return mergeFrom((AppParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AppParam other) {
        if (other == AppParam.getDefaultInstance()) return this;
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasUploadInterval()) {
          setUploadInterval(other.getUploadInterval());
        }
        if (other.hasSyncTime()) {
          setSyncTime(other.getSyncTime());
        }
        if (other.hasNodeState()) {
          setNodeState(other.getNodeState());
        }
        if (other.hasNodeAlarm()) {
          setNodeAlarm(other.getNodeAlarm());
        }
        if (other.hasNodeAlarmSet()) {
          setNodeAlarmSet(other.getNodeAlarmSet());
        }
        if (other.hasConfirm()) {
          setConfirm(other.getConfirm());
        }
        if (other.hasSmokeCtrl()) {
          setSmokeCtrl(other.getSmokeCtrl());
        }
        if (other.hasUploadRepeat()) {
          setUploadRepeat(other.getUploadRepeat());
        }
        if (other.hasAlarmUploadInterval()) {
          setAlarmUploadInterval(other.getAlarmUploadInterval());
        }
        if (other.hasAlarmUploadNb()) {
          setAlarmUploadNb(other.getAlarmUploadNb());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AppParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AppParam) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private AppCmd cmd_ = AppCmd.APP_CMD_NONE;
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       */
      public AppCmd getCmd() {
        return cmd_;
      }
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       */
      public Builder setCmd(AppCmd value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .AppCmd cmd = 1;</code>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cmd_ = AppCmd.APP_CMD_NONE;
        onChanged();
        return this;
      }

      private int uploadInterval_ ;
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       */
      public boolean hasUploadInterval() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       */
      public int getUploadInterval() {
        return uploadInterval_;
      }
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       */
      public Builder setUploadInterval(int value) {
        bitField0_ |= 0x00000002;
        uploadInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uploadInterval = 2;</code>
       */
      public Builder clearUploadInterval() {
        bitField0_ = (bitField0_ & ~0x00000002);
        uploadInterval_ = 0;
        onChanged();
        return this;
      }

      private int syncTime_ ;
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public boolean hasSyncTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public int getSyncTime() {
        return syncTime_;
      }
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public Builder setSyncTime(int value) {
        bitField0_ |= 0x00000004;
        syncTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 syncTime = 3;</code>
       */
      public Builder clearSyncTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        syncTime_ = 0;
        onChanged();
        return this;
      }

      private NodeState nodeState_ = NodeState.NODE_STATE_UNKNOWN;
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public boolean hasNodeState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public NodeState getNodeState() {
        return nodeState_;
      }
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public Builder setNodeState(NodeState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        nodeState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .NodeState nodeState = 4;</code>
       */
      public Builder clearNodeState() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nodeState_ = NodeState.NODE_STATE_UNKNOWN;
        onChanged();
        return this;
      }

      private NodeAlarm nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public boolean hasNodeAlarm() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public NodeAlarm getNodeAlarm() {
        return nodeAlarm_;
      }
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public Builder setNodeAlarm(NodeAlarm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        nodeAlarm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .NodeAlarm nodeAlarm = 5;</code>
       */
      public Builder clearNodeAlarm() {
        bitField0_ = (bitField0_ & ~0x00000010);
        nodeAlarm_ = NodeAlarm.NODE_ALARM_NONE;
        onChanged();
        return this;
      }

      private int nodeAlarmSet_ ;
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public boolean hasNodeAlarmSet() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public int getNodeAlarmSet() {
        return nodeAlarmSet_;
      }
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public Builder setNodeAlarmSet(int value) {
        bitField0_ |= 0x00000020;
        nodeAlarmSet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 nodeAlarmSet = 6;</code>
       */
      public Builder clearNodeAlarmSet() {
        bitField0_ = (bitField0_ & ~0x00000020);
        nodeAlarmSet_ = 0;
        onChanged();
        return this;
      }

      private int confirm_ ;
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public boolean hasConfirm() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public int getConfirm() {
        return confirm_;
      }
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public Builder setConfirm(int value) {
        bitField0_ |= 0x00000040;
        confirm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 confirm = 7;</code>
       */
      public Builder clearConfirm() {
        bitField0_ = (bitField0_ & ~0x00000040);
        confirm_ = 0;
        onChanged();
        return this;
      }

      private SmokeCtrl smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public boolean hasSmokeCtrl() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public SmokeCtrl getSmokeCtrl() {
        return smokeCtrl_;
      }
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public Builder setSmokeCtrl(SmokeCtrl value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        smokeCtrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .SmokeCtrl smokeCtrl = 8;</code>
       */
      public Builder clearSmokeCtrl() {
        bitField0_ = (bitField0_ & ~0x00000080);
        smokeCtrl_ = SmokeCtrl.SMOKE_CTRL_NONE;
        onChanged();
        return this;
      }

      private int uploadRepeat_ ;
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       */
      public boolean hasUploadRepeat() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       */
      public int getUploadRepeat() {
        return uploadRepeat_;
      }
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       */
      public Builder setUploadRepeat(int value) {
        bitField0_ |= 0x00000100;
        uploadRepeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uploadRepeat = 9;</code>
       */
      public Builder clearUploadRepeat() {
        bitField0_ = (bitField0_ & ~0x00000100);
        uploadRepeat_ = 0;
        onChanged();
        return this;
      }

      private int alarmUploadInterval_ ;
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       */
      public boolean hasAlarmUploadInterval() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       */
      public int getAlarmUploadInterval() {
        return alarmUploadInterval_;
      }
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       */
      public Builder setAlarmUploadInterval(int value) {
        bitField0_ |= 0x00000200;
        alarmUploadInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmUploadInterval = 10;</code>
       */
      public Builder clearAlarmUploadInterval() {
        bitField0_ = (bitField0_ & ~0x00000200);
        alarmUploadInterval_ = 0;
        onChanged();
        return this;
      }

      private int alarmUploadNb_ ;
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       */
      public boolean hasAlarmUploadNb() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       */
      public int getAlarmUploadNb() {
        return alarmUploadNb_;
      }
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       */
      public Builder setAlarmUploadNb(int value) {
        bitField0_ |= 0x00000400;
        alarmUploadNb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 alarmUploadNb = 11;</code>
       */
      public Builder clearAlarmUploadNb() {
        bitField0_ = (bitField0_ & ~0x00000400);
        alarmUploadNb_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:AppParam)
    }

    static {
      defaultInstance = new AppParam(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:AppParam)
  }

  public interface MsgNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MsgNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>optional uint32 id = 1;</code>
     */
    int getId();

    /**
     * <code>optional uint32 cmd = 2;</code>
     */
    boolean hasCmd();
    /**
     * <code>optional uint32 cmd = 2;</code>
     */
    int getCmd();

    /**
     * <code>optional uint32 cmdRet = 3;</code>
     */
    boolean hasCmdRet();
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     */
    int getCmdRet();

    /**
     * <code>optional .LoraParam loraParam = 4;</code>
     */
    boolean hasLoraParam();
    /**
     * <code>optional .LoraParam loraParam = 4;</code>
     */
    LoraParam getLoraParam();
    /**
     * <code>optional .LoraParam loraParam = 4;</code>
     */
    LoraParamOrBuilder getLoraParamOrBuilder();

    /**
     * <code>optional .BleParam bleParam = 5;</code>
     */
    boolean hasBleParam();
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     */
    BleParam getBleParam();
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     */
    BleParamOrBuilder getBleParamOrBuilder();

    /**
     * <code>optional .AppParam appParam = 6;</code>
     */
    boolean hasAppParam();
    /**
     * <code>optional .AppParam appParam = 6;</code>
     */
    AppParam getAppParam();
    /**
     * <code>optional .AppParam appParam = 6;</code>
     */
    AppParamOrBuilder getAppParamOrBuilder();

    /**
     * <code>optional sint32 battery = 7;</code>
     */
    boolean hasBattery();
    /**
     * <code>optional sint32 battery = 7;</code>
     */
    int getBattery();

    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    boolean hasGps();
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    GpsData getGps();
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    GpsDataOrBuilder getGpsOrBuilder();

    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    boolean hasAcceleration();
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    AxisData getAcceleration();
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    AxisDataOrBuilder getAccelerationOrBuilder();

    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    boolean hasMagnetism();
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    AxisData getMagnetism();
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    AxisDataOrBuilder getMagnetismOrBuilder();

    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    boolean hasGyroscope();
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    AxisData getGyroscope();
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    AxisDataOrBuilder getGyroscopeOrBuilder();

    /**
     * <code>optional .SensorData temperature = 12;</code>
     */
    boolean hasTemperature();
    /**
     * <code>optional .SensorData temperature = 12;</code>
     */
    SensorData getTemperature();
    /**
     * <code>optional .SensorData temperature = 12;</code>
     */
    SensorDataOrBuilder getTemperatureOrBuilder();

    /**
     * <code>optional .SensorData humidity = 13;</code>
     */
    boolean hasHumidity();
    /**
     * <code>optional .SensorData humidity = 13;</code>
     */
    SensorData getHumidity();
    /**
     * <code>optional .SensorData humidity = 13;</code>
     */
    SensorDataOrBuilder getHumidityOrBuilder();

    /**
     * <code>optional .SensorData light = 14;</code>
     */
    boolean hasLight();
    /**
     * <code>optional .SensorData light = 14;</code>
     */
    SensorData getLight();
    /**
     * <code>optional .SensorData light = 14;</code>
     */
    SensorDataOrBuilder getLightOrBuilder();

    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    boolean hasLeak();
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    SensorData getLeak();
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    SensorDataOrBuilder getLeakOrBuilder();

    /**
     * <code>optional .SensorData co = 16;</code>
     */
    boolean hasCo();
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    SensorData getCo();
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    SensorDataOrBuilder getCoOrBuilder();

    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    boolean hasCo2();
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    SensorData getCo2();
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    SensorDataOrBuilder getCo2OrBuilder();

    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    boolean hasSo2();
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    SensorData getSo2();
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    SensorDataOrBuilder getSo2OrBuilder();

    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    boolean hasNo2();
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    SensorData getNo2();
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    SensorDataOrBuilder getNo2OrBuilder();

    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    boolean hasCh4();
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    SensorData getCh4();
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    SensorDataOrBuilder getCh4OrBuilder();

    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    boolean hasCh2O();
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    SensorData getCh2O();
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    SensorDataOrBuilder getCh2OOrBuilder();

    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    boolean hasLpg();
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    SensorData getLpg();
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    SensorDataOrBuilder getLpgOrBuilder();

    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    boolean hasO3();
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    SensorData getO3();
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    SensorDataOrBuilder getO3OrBuilder();

    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    boolean hasPm1();
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    SensorData getPm1();
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    SensorDataOrBuilder getPm1OrBuilder();

    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    boolean hasPm25();
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    SensorData getPm25();
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    SensorDataOrBuilder getPm25OrBuilder();

    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    boolean hasPm10();
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    SensorData getPm10();
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    SensorDataOrBuilder getPm10OrBuilder();

    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    boolean hasAngle();
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    SensorData getAngle();
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    SensorDataOrBuilder getAngleOrBuilder();

    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    boolean hasCover();
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    SensorData getCover();
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    SensorDataOrBuilder getCoverOrBuilder();

    /**
     * <code>optional .SensorData level = 29;</code>
     */
    boolean hasLevel();
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    SensorData getLevel();
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    SensorDataOrBuilder getLevelOrBuilder();

    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    boolean hasSmoke();
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    SensorData getSmoke();
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    SensorDataOrBuilder getSmokeOrBuilder();

    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    boolean hasPitch();
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    SensorData getPitch();
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    SensorDataOrBuilder getPitchOrBuilder();

    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    boolean hasRoll();
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    SensorData getRoll();
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    SensorDataOrBuilder getRollOrBuilder();

    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    boolean hasYaw();
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    SensorData getYaw();
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    SensorDataOrBuilder getYawOrBuilder();

    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    boolean hasFlame();
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    SensorDataInt getFlame();
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    SensorDataIntOrBuilder getFlameOrBuilder();

    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    boolean hasArtificialGas();
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    SensorData getArtificialGas();
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    SensorDataOrBuilder getArtificialGasOrBuilder();

    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    java.util.List<SensorDataInt>
        getTempArrayList();
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    SensorDataInt getTempArray(int index);
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    int getTempArrayCount();
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    java.util.List<? extends SensorDataIntOrBuilder>
        getTempArrayOrBuilderList();
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    SensorDataIntOrBuilder getTempArrayOrBuilder(
            int index);

    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    boolean hasWaterPressure();
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    SensorData getWaterPressure();
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    SensorDataOrBuilder getWaterPressureOrBuilder();
  }
  /**
   * Protobuf type {@code MsgNode}
   */
  public static final class MsgNode extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:MsgNode)
      MsgNodeOrBuilder {
    // Use MsgNode.newBuilder() to construct.
    private MsgNode(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MsgNode(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MsgNode defaultInstance;
    public static MsgNode getDefaultInstance() {
      return defaultInstance;
    }

    public MsgNode getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MsgNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cmd_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cmdRet_ = input.readUInt32();
              break;
            }
            case 34: {
              LoraParam.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = loraParam_.toBuilder();
              }
              loraParam_ = input.readMessage(LoraParam.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(loraParam_);
                loraParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              BleParam.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = bleParam_.toBuilder();
              }
              bleParam_ = input.readMessage(BleParam.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bleParam_);
                bleParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              AppParam.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = appParam_.toBuilder();
              }
              appParam_ = input.readMessage(AppParam.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(appParam_);
                appParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              battery_ = input.readSInt32();
              break;
            }
            case 66: {
              GpsData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = gps_.toBuilder();
              }
              gps_ = input.readMessage(GpsData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gps_);
                gps_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              AxisData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = acceleration_.toBuilder();
              }
              acceleration_ = input.readMessage(AxisData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(acceleration_);
                acceleration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              AxisData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = magnetism_.toBuilder();
              }
              magnetism_ = input.readMessage(AxisData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(magnetism_);
                magnetism_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              AxisData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = gyroscope_.toBuilder();
              }
              gyroscope_ = input.readMessage(AxisData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gyroscope_);
                gyroscope_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = temperature_.toBuilder();
              }
              temperature_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(temperature_);
                temperature_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = humidity_.toBuilder();
              }
              humidity_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(humidity_);
                humidity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = light_.toBuilder();
              }
              light_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(light_);
                light_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = leak_.toBuilder();
              }
              leak_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(leak_);
                leak_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 130: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = co_.toBuilder();
              }
              co_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(co_);
                co_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 138: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = co2_.toBuilder();
              }
              co2_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(co2_);
                co2_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 146: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = so2_.toBuilder();
              }
              so2_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(so2_);
                so2_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 154: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = no2_.toBuilder();
              }
              no2_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(no2_);
                no2_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 162: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = ch4_.toBuilder();
              }
              ch4_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ch4_);
                ch4_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 170: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) == 0x00100000)) {
                subBuilder = ch2O_.toBuilder();
              }
              ch2O_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ch2O_);
                ch2O_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 178: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00200000) == 0x00200000)) {
                subBuilder = lpg_.toBuilder();
              }
              lpg_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lpg_);
                lpg_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00200000;
              break;
            }
            case 186: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00400000) == 0x00400000)) {
                subBuilder = o3_.toBuilder();
              }
              o3_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(o3_);
                o3_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00400000;
              break;
            }
            case 194: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = pm1_.toBuilder();
              }
              pm1_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pm1_);
                pm1_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 202: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = pm25_.toBuilder();
              }
              pm25_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pm25_);
                pm25_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 210: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x02000000) == 0x02000000)) {
                subBuilder = pm10_.toBuilder();
              }
              pm10_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pm10_);
                pm10_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x02000000;
              break;
            }
            case 218: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x04000000) == 0x04000000)) {
                subBuilder = angle_.toBuilder();
              }
              angle_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(angle_);
                angle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x04000000;
              break;
            }
            case 226: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x08000000) == 0x08000000)) {
                subBuilder = cover_.toBuilder();
              }
              cover_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cover_);
                cover_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x08000000;
              break;
            }
            case 234: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x10000000) == 0x10000000)) {
                subBuilder = level_.toBuilder();
              }
              level_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(level_);
                level_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x10000000;
              break;
            }
            case 242: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x20000000) == 0x20000000)) {
                subBuilder = smoke_.toBuilder();
              }
              smoke_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(smoke_);
                smoke_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x20000000;
              break;
            }
            case 250: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x40000000) == 0x40000000)) {
                subBuilder = pitch_.toBuilder();
              }
              pitch_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pitch_);
                pitch_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x40000000;
              break;
            }
            case 258: {
              SensorData.Builder subBuilder = null;
              if (((bitField0_ & 0x80000000) == 0x80000000)) {
                subBuilder = roll_.toBuilder();
              }
              roll_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roll_);
                roll_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x80000000;
              break;
            }
            case 266: {
              SensorData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000001) == 0x00000001)) {
                subBuilder = yaw_.toBuilder();
              }
              yaw_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(yaw_);
                yaw_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000001;
              break;
            }
            case 274: {
              SensorDataInt.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = flame_.toBuilder();
              }
              flame_ = input.readMessage(SensorDataInt.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(flame_);
                flame_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
            case 282: {
              SensorData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000004) == 0x00000004)) {
                subBuilder = artificialGas_.toBuilder();
              }
              artificialGas_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(artificialGas_);
                artificialGas_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000004;
              break;
            }
            case 290: {
              if (!((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
                tempArray_ = new java.util.ArrayList<SensorDataInt>();
                mutable_bitField1_ |= 0x00000008;
              }
              tempArray_.add(input.readMessage(SensorDataInt.PARSER, extensionRegistry));
              break;
            }
            case 298: {
              SensorData.Builder subBuilder = null;
              if (((bitField1_ & 0x00000008) == 0x00000008)) {
                subBuilder = waterPressure_.toBuilder();
              }
              waterPressure_ = input.readMessage(SensorData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(waterPressure_);
                waterPressure_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
          tempArray_ = java.util.Collections.unmodifiableList(tempArray_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MsgNode1V1M5.internal_static_MsgNode_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MsgNode1V1M5.internal_static_MsgNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MsgNode.class, Builder.class);
    }

    public static com.google.protobuf.Parser<MsgNode> PARSER =
        new com.google.protobuf.AbstractParser<MsgNode>() {
      public MsgNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MsgNode(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<MsgNode> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional uint32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int CMD_FIELD_NUMBER = 2;
    private int cmd_;
    /**
     * <code>optional uint32 cmd = 2;</code>
     */
    public boolean hasCmd() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 cmd = 2;</code>
     */
    public int getCmd() {
      return cmd_;
    }

    public static final int CMDRET_FIELD_NUMBER = 3;
    private int cmdRet_;
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     */
    public boolean hasCmdRet() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 cmdRet = 3;</code>
     */
    public int getCmdRet() {
      return cmdRet_;
    }

    public static final int LORAPARAM_FIELD_NUMBER = 4;
    private LoraParam loraParam_;
    /**
     * <code>optional .LoraParam loraParam = 4;</code>
     */
    public boolean hasLoraParam() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .LoraParam loraParam = 4;</code>
     */
    public LoraParam getLoraParam() {
      return loraParam_;
    }
    /**
     * <code>optional .LoraParam loraParam = 4;</code>
     */
    public LoraParamOrBuilder getLoraParamOrBuilder() {
      return loraParam_;
    }

    public static final int BLEPARAM_FIELD_NUMBER = 5;
    private BleParam bleParam_;
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     */
    public boolean hasBleParam() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     */
    public BleParam getBleParam() {
      return bleParam_;
    }
    /**
     * <code>optional .BleParam bleParam = 5;</code>
     */
    public BleParamOrBuilder getBleParamOrBuilder() {
      return bleParam_;
    }

    public static final int APPPARAM_FIELD_NUMBER = 6;
    private AppParam appParam_;
    /**
     * <code>optional .AppParam appParam = 6;</code>
     */
    public boolean hasAppParam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .AppParam appParam = 6;</code>
     */
    public AppParam getAppParam() {
      return appParam_;
    }
    /**
     * <code>optional .AppParam appParam = 6;</code>
     */
    public AppParamOrBuilder getAppParamOrBuilder() {
      return appParam_;
    }

    public static final int BATTERY_FIELD_NUMBER = 7;
    private int battery_;
    /**
     * <code>optional sint32 battery = 7;</code>
     */
    public boolean hasBattery() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 battery = 7;</code>
     */
    public int getBattery() {
      return battery_;
    }

    public static final int GPS_FIELD_NUMBER = 8;
    private GpsData gps_;
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    public boolean hasGps() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    public GpsData getGps() {
      return gps_;
    }
    /**
     * <code>optional .GpsData gps = 8;</code>
     */
    public GpsDataOrBuilder getGpsOrBuilder() {
      return gps_;
    }

    public static final int ACCELERATION_FIELD_NUMBER = 9;
    private AxisData acceleration_;
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    public boolean hasAcceleration() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    public AxisData getAcceleration() {
      return acceleration_;
    }
    /**
     * <code>optional .AxisData acceleration = 9;</code>
     */
    public AxisDataOrBuilder getAccelerationOrBuilder() {
      return acceleration_;
    }

    public static final int MAGNETISM_FIELD_NUMBER = 10;
    private AxisData magnetism_;
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    public boolean hasMagnetism() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    public AxisData getMagnetism() {
      return magnetism_;
    }
    /**
     * <code>optional .AxisData magnetism = 10;</code>
     */
    public AxisDataOrBuilder getMagnetismOrBuilder() {
      return magnetism_;
    }

    public static final int GYROSCOPE_FIELD_NUMBER = 11;
    private AxisData gyroscope_;
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    public boolean hasGyroscope() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    public AxisData getGyroscope() {
      return gyroscope_;
    }
    /**
     * <code>optional .AxisData gyroscope = 11;</code>
     */
    public AxisDataOrBuilder getGyroscopeOrBuilder() {
      return gyroscope_;
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 12;
    private SensorData temperature_;
    /**
     * <code>optional .SensorData temperature = 12;</code>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .SensorData temperature = 12;</code>
     */
    public SensorData getTemperature() {
      return temperature_;
    }
    /**
     * <code>optional .SensorData temperature = 12;</code>
     */
    public SensorDataOrBuilder getTemperatureOrBuilder() {
      return temperature_;
    }

    public static final int HUMIDITY_FIELD_NUMBER = 13;
    private SensorData humidity_;
    /**
     * <code>optional .SensorData humidity = 13;</code>
     */
    public boolean hasHumidity() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .SensorData humidity = 13;</code>
     */
    public SensorData getHumidity() {
      return humidity_;
    }
    /**
     * <code>optional .SensorData humidity = 13;</code>
     */
    public SensorDataOrBuilder getHumidityOrBuilder() {
      return humidity_;
    }

    public static final int LIGHT_FIELD_NUMBER = 14;
    private SensorData light_;
    /**
     * <code>optional .SensorData light = 14;</code>
     */
    public boolean hasLight() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .SensorData light = 14;</code>
     */
    public SensorData getLight() {
      return light_;
    }
    /**
     * <code>optional .SensorData light = 14;</code>
     */
    public SensorDataOrBuilder getLightOrBuilder() {
      return light_;
    }

    public static final int LEAK_FIELD_NUMBER = 15;
    private SensorData leak_;
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    public boolean hasLeak() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    public SensorData getLeak() {
      return leak_;
    }
    /**
     * <code>optional .SensorData leak = 15;</code>
     */
    public SensorDataOrBuilder getLeakOrBuilder() {
      return leak_;
    }

    public static final int CO_FIELD_NUMBER = 16;
    private SensorData co_;
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    public boolean hasCo() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    public SensorData getCo() {
      return co_;
    }
    /**
     * <code>optional .SensorData co = 16;</code>
     */
    public SensorDataOrBuilder getCoOrBuilder() {
      return co_;
    }

    public static final int CO2_FIELD_NUMBER = 17;
    private SensorData co2_;
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    public boolean hasCo2() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    public SensorData getCo2() {
      return co2_;
    }
    /**
     * <code>optional .SensorData co2 = 17;</code>
     */
    public SensorDataOrBuilder getCo2OrBuilder() {
      return co2_;
    }

    public static final int SO2_FIELD_NUMBER = 18;
    private SensorData so2_;
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    public boolean hasSo2() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    public SensorData getSo2() {
      return so2_;
    }
    /**
     * <code>optional .SensorData so2 = 18;</code>
     */
    public SensorDataOrBuilder getSo2OrBuilder() {
      return so2_;
    }

    public static final int NO2_FIELD_NUMBER = 19;
    private SensorData no2_;
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    public boolean hasNo2() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    public SensorData getNo2() {
      return no2_;
    }
    /**
     * <code>optional .SensorData no2 = 19;</code>
     */
    public SensorDataOrBuilder getNo2OrBuilder() {
      return no2_;
    }

    public static final int CH4_FIELD_NUMBER = 20;
    private SensorData ch4_;
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    public boolean hasCh4() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    public SensorData getCh4() {
      return ch4_;
    }
    /**
     * <code>optional .SensorData ch4 = 20;</code>
     */
    public SensorDataOrBuilder getCh4OrBuilder() {
      return ch4_;
    }

    public static final int CH2O_FIELD_NUMBER = 21;
    private SensorData ch2O_;
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    public boolean hasCh2O() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    public SensorData getCh2O() {
      return ch2O_;
    }
    /**
     * <code>optional .SensorData ch2o = 21;</code>
     */
    public SensorDataOrBuilder getCh2OOrBuilder() {
      return ch2O_;
    }

    public static final int LPG_FIELD_NUMBER = 22;
    private SensorData lpg_;
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    public boolean hasLpg() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    public SensorData getLpg() {
      return lpg_;
    }
    /**
     * <code>optional .SensorData lpg = 22;</code>
     */
    public SensorDataOrBuilder getLpgOrBuilder() {
      return lpg_;
    }

    public static final int O3_FIELD_NUMBER = 23;
    private SensorData o3_;
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    public boolean hasO3() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    public SensorData getO3() {
      return o3_;
    }
    /**
     * <code>optional .SensorData o3 = 23;</code>
     */
    public SensorDataOrBuilder getO3OrBuilder() {
      return o3_;
    }

    public static final int PM1_FIELD_NUMBER = 24;
    private SensorData pm1_;
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    public boolean hasPm1() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    public SensorData getPm1() {
      return pm1_;
    }
    /**
     * <code>optional .SensorData pm1 = 24;</code>
     */
    public SensorDataOrBuilder getPm1OrBuilder() {
      return pm1_;
    }

    public static final int PM2_5_FIELD_NUMBER = 25;
    private SensorData pm25_;
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    public boolean hasPm25() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    public SensorData getPm25() {
      return pm25_;
    }
    /**
     * <code>optional .SensorData pm2_5 = 25;</code>
     */
    public SensorDataOrBuilder getPm25OrBuilder() {
      return pm25_;
    }

    public static final int PM10_FIELD_NUMBER = 26;
    private SensorData pm10_;
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    public boolean hasPm10() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    public SensorData getPm10() {
      return pm10_;
    }
    /**
     * <code>optional .SensorData pm10 = 26;</code>
     */
    public SensorDataOrBuilder getPm10OrBuilder() {
      return pm10_;
    }

    public static final int ANGLE_FIELD_NUMBER = 27;
    private SensorData angle_;
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    public boolean hasAngle() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    public SensorData getAngle() {
      return angle_;
    }
    /**
     * <code>optional .SensorData angle = 27;</code>
     */
    public SensorDataOrBuilder getAngleOrBuilder() {
      return angle_;
    }

    public static final int COVER_FIELD_NUMBER = 28;
    private SensorData cover_;
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    public boolean hasCover() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    public SensorData getCover() {
      return cover_;
    }
    /**
     * <code>optional .SensorData cover = 28;</code>
     */
    public SensorDataOrBuilder getCoverOrBuilder() {
      return cover_;
    }

    public static final int LEVEL_FIELD_NUMBER = 29;
    private SensorData level_;
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    public SensorData getLevel() {
      return level_;
    }
    /**
     * <code>optional .SensorData level = 29;</code>
     */
    public SensorDataOrBuilder getLevelOrBuilder() {
      return level_;
    }

    public static final int SMOKE_FIELD_NUMBER = 30;
    private SensorData smoke_;
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    public boolean hasSmoke() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    public SensorData getSmoke() {
      return smoke_;
    }
    /**
     * <code>optional .SensorData smoke = 30;</code>
     */
    public SensorDataOrBuilder getSmokeOrBuilder() {
      return smoke_;
    }

    public static final int PITCH_FIELD_NUMBER = 31;
    private SensorData pitch_;
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    public boolean hasPitch() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    public SensorData getPitch() {
      return pitch_;
    }
    /**
     * <code>optional .SensorData pitch = 31;</code>
     */
    public SensorDataOrBuilder getPitchOrBuilder() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 32;
    private SensorData roll_;
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    public boolean hasRoll() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    public SensorData getRoll() {
      return roll_;
    }
    /**
     * <code>optional .SensorData roll = 32;</code>
     */
    public SensorDataOrBuilder getRollOrBuilder() {
      return roll_;
    }

    public static final int YAW_FIELD_NUMBER = 33;
    private SensorData yaw_;
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    public boolean hasYaw() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    public SensorData getYaw() {
      return yaw_;
    }
    /**
     * <code>optional .SensorData yaw = 33;</code>
     */
    public SensorDataOrBuilder getYawOrBuilder() {
      return yaw_;
    }

    public static final int FLAME_FIELD_NUMBER = 34;
    private SensorDataInt flame_;
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    public boolean hasFlame() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    public SensorDataInt getFlame() {
      return flame_;
    }
    /**
     * <code>optional .SensorDataInt flame = 34;</code>
     */
    public SensorDataIntOrBuilder getFlameOrBuilder() {
      return flame_;
    }

    public static final int ARTIFICIALGAS_FIELD_NUMBER = 35;
    private SensorData artificialGas_;
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    public boolean hasArtificialGas() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    public SensorData getArtificialGas() {
      return artificialGas_;
    }
    /**
     * <code>optional .SensorData artificialGas = 35;</code>
     */
    public SensorDataOrBuilder getArtificialGasOrBuilder() {
      return artificialGas_;
    }

    public static final int TEMPARRAY_FIELD_NUMBER = 36;
    private java.util.List<SensorDataInt> tempArray_;
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    public java.util.List<SensorDataInt> getTempArrayList() {
      return tempArray_;
    }
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    public java.util.List<? extends SensorDataIntOrBuilder>
        getTempArrayOrBuilderList() {
      return tempArray_;
    }
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    public int getTempArrayCount() {
      return tempArray_.size();
    }
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    public SensorDataInt getTempArray(int index) {
      return tempArray_.get(index);
    }
    /**
     * <code>repeated .SensorDataInt tempArray = 36;</code>
     */
    public SensorDataIntOrBuilder getTempArrayOrBuilder(
        int index) {
      return tempArray_.get(index);
    }

    public static final int WATERPRESSURE_FIELD_NUMBER = 37;
    private SensorData waterPressure_;
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    public boolean hasWaterPressure() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    public SensorData getWaterPressure() {
      return waterPressure_;
    }
    /**
     * <code>optional .SensorData waterPressure = 37;</code>
     */
    public SensorDataOrBuilder getWaterPressureOrBuilder() {
      return waterPressure_;
    }

    private void initFields() {
      id_ = 0;
      cmd_ = 0;
      cmdRet_ = 0;
      loraParam_ = LoraParam.getDefaultInstance();
      bleParam_ = BleParam.getDefaultInstance();
      appParam_ = AppParam.getDefaultInstance();
      battery_ = 0;
      gps_ = GpsData.getDefaultInstance();
      acceleration_ = AxisData.getDefaultInstance();
      magnetism_ = AxisData.getDefaultInstance();
      gyroscope_ = AxisData.getDefaultInstance();
      temperature_ = SensorData.getDefaultInstance();
      humidity_ = SensorData.getDefaultInstance();
      light_ = SensorData.getDefaultInstance();
      leak_ = SensorData.getDefaultInstance();
      co_ = SensorData.getDefaultInstance();
      co2_ = SensorData.getDefaultInstance();
      so2_ = SensorData.getDefaultInstance();
      no2_ = SensorData.getDefaultInstance();
      ch4_ = SensorData.getDefaultInstance();
      ch2O_ = SensorData.getDefaultInstance();
      lpg_ = SensorData.getDefaultInstance();
      o3_ = SensorData.getDefaultInstance();
      pm1_ = SensorData.getDefaultInstance();
      pm25_ = SensorData.getDefaultInstance();
      pm10_ = SensorData.getDefaultInstance();
      angle_ = SensorData.getDefaultInstance();
      cover_ = SensorData.getDefaultInstance();
      level_ = SensorData.getDefaultInstance();
      smoke_ = SensorData.getDefaultInstance();
      pitch_ = SensorData.getDefaultInstance();
      roll_ = SensorData.getDefaultInstance();
      yaw_ = SensorData.getDefaultInstance();
      flame_ = SensorDataInt.getDefaultInstance();
      artificialGas_ = SensorData.getDefaultInstance();
      tempArray_ = java.util.Collections.emptyList();
      waterPressure_ = SensorData.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, cmd_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, cmdRet_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, loraParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, bleParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, appParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, battery_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, gps_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, acceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, magnetism_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, gyroscope_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, temperature_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, humidity_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, light_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, leak_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, co_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(17, co2_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, so2_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(19, no2_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(20, ch4_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(21, ch2O_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(22, lpg_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(23, o3_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(24, pm1_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(25, pm25_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(26, pm10_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(27, angle_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(28, cover_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(29, level_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(30, smoke_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(31, pitch_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(32, roll_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(33, yaw_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(34, flame_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(35, artificialGas_);
      }
      for (int i = 0; i < tempArray_.size(); i++) {
        output.writeMessage(36, tempArray_.get(i));
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(37, waterPressure_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, cmd_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, cmdRet_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, loraParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, bleParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, appParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, battery_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, gps_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, acceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, magnetism_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, gyroscope_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, temperature_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, humidity_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, light_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, leak_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, co_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, co2_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, so2_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, no2_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, ch4_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, ch2O_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, lpg_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, o3_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, pm1_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, pm25_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, pm10_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, angle_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, cover_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, level_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, smoke_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, pitch_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, roll_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, yaw_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, flame_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, artificialGas_);
      }
      for (int i = 0; i < tempArray_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, tempArray_.get(i));
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, waterPressure_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static MsgNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MsgNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MsgNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MsgNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MsgNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MsgNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static MsgNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static MsgNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static MsgNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MsgNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(MsgNode prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MsgNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MsgNode)
        MsgNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MsgNode1V1M5.internal_static_MsgNode_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MsgNode1V1M5.internal_static_MsgNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MsgNode.class, Builder.class);
      }

      // Construct using MsgNode1V1M5.MsgNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLoraParamFieldBuilder();
          getBleParamFieldBuilder();
          getAppParamFieldBuilder();
          getGpsFieldBuilder();
          getAccelerationFieldBuilder();
          getMagnetismFieldBuilder();
          getGyroscopeFieldBuilder();
          getTemperatureFieldBuilder();
          getHumidityFieldBuilder();
          getLightFieldBuilder();
          getLeakFieldBuilder();
          getCoFieldBuilder();
          getCo2FieldBuilder();
          getSo2FieldBuilder();
          getNo2FieldBuilder();
          getCh4FieldBuilder();
          getCh2OFieldBuilder();
          getLpgFieldBuilder();
          getO3FieldBuilder();
          getPm1FieldBuilder();
          getPm25FieldBuilder();
          getPm10FieldBuilder();
          getAngleFieldBuilder();
          getCoverFieldBuilder();
          getLevelFieldBuilder();
          getSmokeFieldBuilder();
          getPitchFieldBuilder();
          getRollFieldBuilder();
          getYawFieldBuilder();
          getFlameFieldBuilder();
          getArtificialGasFieldBuilder();
          getTempArrayFieldBuilder();
          getWaterPressureFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cmd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        cmdRet_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (loraParamBuilder_ == null) {
          loraParam_ = LoraParam.getDefaultInstance();
        } else {
          loraParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (bleParamBuilder_ == null) {
          bleParam_ = BleParam.getDefaultInstance();
        } else {
          bleParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (appParamBuilder_ == null) {
          appParam_ = AppParam.getDefaultInstance();
        } else {
          appParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        battery_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (gpsBuilder_ == null) {
          gps_ = GpsData.getDefaultInstance();
        } else {
          gpsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (accelerationBuilder_ == null) {
          acceleration_ = AxisData.getDefaultInstance();
        } else {
          accelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (magnetismBuilder_ == null) {
          magnetism_ = AxisData.getDefaultInstance();
        } else {
          magnetismBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (gyroscopeBuilder_ == null) {
          gyroscope_ = AxisData.getDefaultInstance();
        } else {
          gyroscopeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (temperatureBuilder_ == null) {
          temperature_ = SensorData.getDefaultInstance();
        } else {
          temperatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (humidityBuilder_ == null) {
          humidity_ = SensorData.getDefaultInstance();
        } else {
          humidityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (lightBuilder_ == null) {
          light_ = SensorData.getDefaultInstance();
        } else {
          lightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (leakBuilder_ == null) {
          leak_ = SensorData.getDefaultInstance();
        } else {
          leakBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (coBuilder_ == null) {
          co_ = SensorData.getDefaultInstance();
        } else {
          coBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (co2Builder_ == null) {
          co2_ = SensorData.getDefaultInstance();
        } else {
          co2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (so2Builder_ == null) {
          so2_ = SensorData.getDefaultInstance();
        } else {
          so2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (no2Builder_ == null) {
          no2_ = SensorData.getDefaultInstance();
        } else {
          no2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (ch4Builder_ == null) {
          ch4_ = SensorData.getDefaultInstance();
        } else {
          ch4Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (ch2OBuilder_ == null) {
          ch2O_ = SensorData.getDefaultInstance();
        } else {
          ch2OBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (lpgBuilder_ == null) {
          lpg_ = SensorData.getDefaultInstance();
        } else {
          lpgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (o3Builder_ == null) {
          o3_ = SensorData.getDefaultInstance();
        } else {
          o3Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (pm1Builder_ == null) {
          pm1_ = SensorData.getDefaultInstance();
        } else {
          pm1Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (pm25Builder_ == null) {
          pm25_ = SensorData.getDefaultInstance();
        } else {
          pm25Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (pm10Builder_ == null) {
          pm10_ = SensorData.getDefaultInstance();
        } else {
          pm10Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        if (angleBuilder_ == null) {
          angle_ = SensorData.getDefaultInstance();
        } else {
          angleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        if (coverBuilder_ == null) {
          cover_ = SensorData.getDefaultInstance();
        } else {
          coverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (levelBuilder_ == null) {
          level_ = SensorData.getDefaultInstance();
        } else {
          levelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (smokeBuilder_ == null) {
          smoke_ = SensorData.getDefaultInstance();
        } else {
          smokeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        if (pitchBuilder_ == null) {
          pitch_ = SensorData.getDefaultInstance();
        } else {
          pitchBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        if (rollBuilder_ == null) {
          roll_ = SensorData.getDefaultInstance();
        } else {
          rollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        if (yawBuilder_ == null) {
          yaw_ = SensorData.getDefaultInstance();
        } else {
          yawBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        if (flameBuilder_ == null) {
          flame_ = SensorDataInt.getDefaultInstance();
        } else {
          flameBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        if (artificialGasBuilder_ == null) {
          artificialGas_ = SensorData.getDefaultInstance();
        } else {
          artificialGasBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        if (tempArrayBuilder_ == null) {
          tempArray_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000008);
        } else {
          tempArrayBuilder_.clear();
        }
        if (waterPressureBuilder_ == null) {
          waterPressure_ = SensorData.getDefaultInstance();
        } else {
          waterPressureBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MsgNode1V1M5.internal_static_MsgNode_descriptor;
      }

      public MsgNode getDefaultInstanceForType() {
        return MsgNode.getDefaultInstance();
      }

      public MsgNode build() {
        MsgNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public MsgNode buildPartial() {
        MsgNode result = new MsgNode(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cmd_ = cmd_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cmdRet_ = cmdRet_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (loraParamBuilder_ == null) {
          result.loraParam_ = loraParam_;
        } else {
          result.loraParam_ = loraParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (bleParamBuilder_ == null) {
          result.bleParam_ = bleParam_;
        } else {
          result.bleParam_ = bleParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (appParamBuilder_ == null) {
          result.appParam_ = appParam_;
        } else {
          result.appParam_ = appParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.battery_ = battery_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (gpsBuilder_ == null) {
          result.gps_ = gps_;
        } else {
          result.gps_ = gpsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (accelerationBuilder_ == null) {
          result.acceleration_ = acceleration_;
        } else {
          result.acceleration_ = accelerationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (magnetismBuilder_ == null) {
          result.magnetism_ = magnetism_;
        } else {
          result.magnetism_ = magnetismBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (gyroscopeBuilder_ == null) {
          result.gyroscope_ = gyroscope_;
        } else {
          result.gyroscope_ = gyroscopeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (temperatureBuilder_ == null) {
          result.temperature_ = temperature_;
        } else {
          result.temperature_ = temperatureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (humidityBuilder_ == null) {
          result.humidity_ = humidity_;
        } else {
          result.humidity_ = humidityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (lightBuilder_ == null) {
          result.light_ = light_;
        } else {
          result.light_ = lightBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (leakBuilder_ == null) {
          result.leak_ = leak_;
        } else {
          result.leak_ = leakBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (coBuilder_ == null) {
          result.co_ = co_;
        } else {
          result.co_ = coBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (co2Builder_ == null) {
          result.co2_ = co2_;
        } else {
          result.co2_ = co2Builder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (so2Builder_ == null) {
          result.so2_ = so2_;
        } else {
          result.so2_ = so2Builder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (no2Builder_ == null) {
          result.no2_ = no2_;
        } else {
          result.no2_ = no2Builder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (ch4Builder_ == null) {
          result.ch4_ = ch4_;
        } else {
          result.ch4_ = ch4Builder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (ch2OBuilder_ == null) {
          result.ch2O_ = ch2O_;
        } else {
          result.ch2O_ = ch2OBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        if (lpgBuilder_ == null) {
          result.lpg_ = lpg_;
        } else {
          result.lpg_ = lpgBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        if (o3Builder_ == null) {
          result.o3_ = o3_;
        } else {
          result.o3_ = o3Builder_.build();
        }
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (pm1Builder_ == null) {
          result.pm1_ = pm1_;
        } else {
          result.pm1_ = pm1Builder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        if (pm25Builder_ == null) {
          result.pm25_ = pm25_;
        } else {
          result.pm25_ = pm25Builder_.build();
        }
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        if (pm10Builder_ == null) {
          result.pm10_ = pm10_;
        } else {
          result.pm10_ = pm10Builder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        if (angleBuilder_ == null) {
          result.angle_ = angle_;
        } else {
          result.angle_ = angleBuilder_.build();
        }
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        if (coverBuilder_ == null) {
          result.cover_ = cover_;
        } else {
          result.cover_ = coverBuilder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        if (levelBuilder_ == null) {
          result.level_ = level_;
        } else {
          result.level_ = levelBuilder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        if (smokeBuilder_ == null) {
          result.smoke_ = smoke_;
        } else {
          result.smoke_ = smokeBuilder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        if (pitchBuilder_ == null) {
          result.pitch_ = pitch_;
        } else {
          result.pitch_ = pitchBuilder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        if (rollBuilder_ == null) {
          result.roll_ = roll_;
        } else {
          result.roll_ = rollBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        if (yawBuilder_ == null) {
          result.yaw_ = yaw_;
        } else {
          result.yaw_ = yawBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        if (flameBuilder_ == null) {
          result.flame_ = flame_;
        } else {
          result.flame_ = flameBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        if (artificialGasBuilder_ == null) {
          result.artificialGas_ = artificialGas_;
        } else {
          result.artificialGas_ = artificialGasBuilder_.build();
        }
        if (tempArrayBuilder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008)) {
            tempArray_ = java.util.Collections.unmodifiableList(tempArray_);
            bitField1_ = (bitField1_ & ~0x00000008);
          }
          result.tempArray_ = tempArray_;
        } else {
          result.tempArray_ = tempArrayBuilder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000008;
        }
        if (waterPressureBuilder_ == null) {
          result.waterPressure_ = waterPressure_;
        } else {
          result.waterPressure_ = waterPressureBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MsgNode) {
          return mergeFrom((MsgNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MsgNode other) {
        if (other == MsgNode.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasCmd()) {
          setCmd(other.getCmd());
        }
        if (other.hasCmdRet()) {
          setCmdRet(other.getCmdRet());
        }
        if (other.hasLoraParam()) {
          mergeLoraParam(other.getLoraParam());
        }
        if (other.hasBleParam()) {
          mergeBleParam(other.getBleParam());
        }
        if (other.hasAppParam()) {
          mergeAppParam(other.getAppParam());
        }
        if (other.hasBattery()) {
          setBattery(other.getBattery());
        }
        if (other.hasGps()) {
          mergeGps(other.getGps());
        }
        if (other.hasAcceleration()) {
          mergeAcceleration(other.getAcceleration());
        }
        if (other.hasMagnetism()) {
          mergeMagnetism(other.getMagnetism());
        }
        if (other.hasGyroscope()) {
          mergeGyroscope(other.getGyroscope());
        }
        if (other.hasTemperature()) {
          mergeTemperature(other.getTemperature());
        }
        if (other.hasHumidity()) {
          mergeHumidity(other.getHumidity());
        }
        if (other.hasLight()) {
          mergeLight(other.getLight());
        }
        if (other.hasLeak()) {
          mergeLeak(other.getLeak());
        }
        if (other.hasCo()) {
          mergeCo(other.getCo());
        }
        if (other.hasCo2()) {
          mergeCo2(other.getCo2());
        }
        if (other.hasSo2()) {
          mergeSo2(other.getSo2());
        }
        if (other.hasNo2()) {
          mergeNo2(other.getNo2());
        }
        if (other.hasCh4()) {
          mergeCh4(other.getCh4());
        }
        if (other.hasCh2O()) {
          mergeCh2O(other.getCh2O());
        }
        if (other.hasLpg()) {
          mergeLpg(other.getLpg());
        }
        if (other.hasO3()) {
          mergeO3(other.getO3());
        }
        if (other.hasPm1()) {
          mergePm1(other.getPm1());
        }
        if (other.hasPm25()) {
          mergePm25(other.getPm25());
        }
        if (other.hasPm10()) {
          mergePm10(other.getPm10());
        }
        if (other.hasAngle()) {
          mergeAngle(other.getAngle());
        }
        if (other.hasCover()) {
          mergeCover(other.getCover());
        }
        if (other.hasLevel()) {
          mergeLevel(other.getLevel());
        }
        if (other.hasSmoke()) {
          mergeSmoke(other.getSmoke());
        }
        if (other.hasPitch()) {
          mergePitch(other.getPitch());
        }
        if (other.hasRoll()) {
          mergeRoll(other.getRoll());
        }
        if (other.hasYaw()) {
          mergeYaw(other.getYaw());
        }
        if (other.hasFlame()) {
          mergeFlame(other.getFlame());
        }
        if (other.hasArtificialGas()) {
          mergeArtificialGas(other.getArtificialGas());
        }
        if (tempArrayBuilder_ == null) {
          if (!other.tempArray_.isEmpty()) {
            if (tempArray_.isEmpty()) {
              tempArray_ = other.tempArray_;
              bitField1_ = (bitField1_ & ~0x00000008);
            } else {
              ensureTempArrayIsMutable();
              tempArray_.addAll(other.tempArray_);
            }
            onChanged();
          }
        } else {
          if (!other.tempArray_.isEmpty()) {
            if (tempArrayBuilder_.isEmpty()) {
              tempArrayBuilder_.dispose();
              tempArrayBuilder_ = null;
              tempArray_ = other.tempArray_;
              bitField1_ = (bitField1_ & ~0x00000008);
              tempArrayBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTempArrayFieldBuilder() : null;
            } else {
              tempArrayBuilder_.addAllMessages(other.tempArray_);
            }
          }
        }
        if (other.hasWaterPressure()) {
          mergeWaterPressure(other.getWaterPressure());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MsgNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MsgNode) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int id_ ;
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int cmd_ ;
      /**
       * <code>optional uint32 cmd = 2;</code>
       */
      public boolean hasCmd() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 cmd = 2;</code>
       */
      public int getCmd() {
        return cmd_;
      }
      /**
       * <code>optional uint32 cmd = 2;</code>
       */
      public Builder setCmd(int value) {
        bitField0_ |= 0x00000002;
        cmd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmd = 2;</code>
       */
      public Builder clearCmd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cmd_ = 0;
        onChanged();
        return this;
      }

      private int cmdRet_ ;
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       */
      public boolean hasCmdRet() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       */
      public int getCmdRet() {
        return cmdRet_;
      }
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       */
      public Builder setCmdRet(int value) {
        bitField0_ |= 0x00000004;
        cmdRet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cmdRet = 3;</code>
       */
      public Builder clearCmdRet() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cmdRet_ = 0;
        onChanged();
        return this;
      }

      private LoraParam loraParam_ = LoraParam.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          LoraParam, LoraParam.Builder, LoraParamOrBuilder> loraParamBuilder_;
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public boolean hasLoraParam() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public LoraParam getLoraParam() {
        if (loraParamBuilder_ == null) {
          return loraParam_;
        } else {
          return loraParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public Builder setLoraParam(LoraParam value) {
        if (loraParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          loraParam_ = value;
          onChanged();
        } else {
          loraParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public Builder setLoraParam(
          LoraParam.Builder builderForValue) {
        if (loraParamBuilder_ == null) {
          loraParam_ = builderForValue.build();
          onChanged();
        } else {
          loraParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public Builder mergeLoraParam(LoraParam value) {
        if (loraParamBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              loraParam_ != LoraParam.getDefaultInstance()) {
            loraParam_ =
              LoraParam.newBuilder(loraParam_).mergeFrom(value).buildPartial();
          } else {
            loraParam_ = value;
          }
          onChanged();
        } else {
          loraParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public Builder clearLoraParam() {
        if (loraParamBuilder_ == null) {
          loraParam_ = LoraParam.getDefaultInstance();
          onChanged();
        } else {
          loraParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public LoraParam.Builder getLoraParamBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLoraParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      public LoraParamOrBuilder getLoraParamOrBuilder() {
        if (loraParamBuilder_ != null) {
          return loraParamBuilder_.getMessageOrBuilder();
        } else {
          return loraParam_;
        }
      }
      /**
       * <code>optional .LoraParam loraParam = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          LoraParam, LoraParam.Builder, LoraParamOrBuilder>
          getLoraParamFieldBuilder() {
        if (loraParamBuilder_ == null) {
          loraParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              LoraParam, LoraParam.Builder, LoraParamOrBuilder>(
                  getLoraParam(),
                  getParentForChildren(),
                  isClean());
          loraParam_ = null;
        }
        return loraParamBuilder_;
      }

      private BleParam bleParam_ = BleParam.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          BleParam, BleParam.Builder, BleParamOrBuilder> bleParamBuilder_;
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public boolean hasBleParam() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public BleParam getBleParam() {
        if (bleParamBuilder_ == null) {
          return bleParam_;
        } else {
          return bleParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public Builder setBleParam(BleParam value) {
        if (bleParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bleParam_ = value;
          onChanged();
        } else {
          bleParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public Builder setBleParam(
          BleParam.Builder builderForValue) {
        if (bleParamBuilder_ == null) {
          bleParam_ = builderForValue.build();
          onChanged();
        } else {
          bleParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public Builder mergeBleParam(BleParam value) {
        if (bleParamBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              bleParam_ != BleParam.getDefaultInstance()) {
            bleParam_ =
              BleParam.newBuilder(bleParam_).mergeFrom(value).buildPartial();
          } else {
            bleParam_ = value;
          }
          onChanged();
        } else {
          bleParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public Builder clearBleParam() {
        if (bleParamBuilder_ == null) {
          bleParam_ = BleParam.getDefaultInstance();
          onChanged();
        } else {
          bleParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public BleParam.Builder getBleParamBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getBleParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      public BleParamOrBuilder getBleParamOrBuilder() {
        if (bleParamBuilder_ != null) {
          return bleParamBuilder_.getMessageOrBuilder();
        } else {
          return bleParam_;
        }
      }
      /**
       * <code>optional .BleParam bleParam = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          BleParam, BleParam.Builder, BleParamOrBuilder>
          getBleParamFieldBuilder() {
        if (bleParamBuilder_ == null) {
          bleParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              BleParam, BleParam.Builder, BleParamOrBuilder>(
                  getBleParam(),
                  getParentForChildren(),
                  isClean());
          bleParam_ = null;
        }
        return bleParamBuilder_;
      }

      private AppParam appParam_ = AppParam.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AppParam, AppParam.Builder, AppParamOrBuilder> appParamBuilder_;
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public boolean hasAppParam() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public AppParam getAppParam() {
        if (appParamBuilder_ == null) {
          return appParam_;
        } else {
          return appParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public Builder setAppParam(AppParam value) {
        if (appParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          appParam_ = value;
          onChanged();
        } else {
          appParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public Builder setAppParam(
          AppParam.Builder builderForValue) {
        if (appParamBuilder_ == null) {
          appParam_ = builderForValue.build();
          onChanged();
        } else {
          appParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public Builder mergeAppParam(AppParam value) {
        if (appParamBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              appParam_ != AppParam.getDefaultInstance()) {
            appParam_ =
              AppParam.newBuilder(appParam_).mergeFrom(value).buildPartial();
          } else {
            appParam_ = value;
          }
          onChanged();
        } else {
          appParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public Builder clearAppParam() {
        if (appParamBuilder_ == null) {
          appParam_ = AppParam.getDefaultInstance();
          onChanged();
        } else {
          appParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public AppParam.Builder getAppParamBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getAppParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      public AppParamOrBuilder getAppParamOrBuilder() {
        if (appParamBuilder_ != null) {
          return appParamBuilder_.getMessageOrBuilder();
        } else {
          return appParam_;
        }
      }
      /**
       * <code>optional .AppParam appParam = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AppParam, AppParam.Builder, AppParamOrBuilder>
          getAppParamFieldBuilder() {
        if (appParamBuilder_ == null) {
          appParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AppParam, AppParam.Builder, AppParamOrBuilder>(
                  getAppParam(),
                  getParentForChildren(),
                  isClean());
          appParam_ = null;
        }
        return appParamBuilder_;
      }

      private int battery_ ;
      /**
       * <code>optional sint32 battery = 7;</code>
       */
      public boolean hasBattery() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 battery = 7;</code>
       */
      public int getBattery() {
        return battery_;
      }
      /**
       * <code>optional sint32 battery = 7;</code>
       */
      public Builder setBattery(int value) {
        bitField0_ |= 0x00000040;
        battery_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 battery = 7;</code>
       */
      public Builder clearBattery() {
        bitField0_ = (bitField0_ & ~0x00000040);
        battery_ = 0;
        onChanged();
        return this;
      }

      private GpsData gps_ = GpsData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          GpsData, GpsData.Builder, GpsDataOrBuilder> gpsBuilder_;
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public boolean hasGps() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public GpsData getGps() {
        if (gpsBuilder_ == null) {
          return gps_;
        } else {
          return gpsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder setGps(GpsData value) {
        if (gpsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gps_ = value;
          onChanged();
        } else {
          gpsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder setGps(
          GpsData.Builder builderForValue) {
        if (gpsBuilder_ == null) {
          gps_ = builderForValue.build();
          onChanged();
        } else {
          gpsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder mergeGps(GpsData value) {
        if (gpsBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              gps_ != GpsData.getDefaultInstance()) {
            gps_ =
              GpsData.newBuilder(gps_).mergeFrom(value).buildPartial();
          } else {
            gps_ = value;
          }
          onChanged();
        } else {
          gpsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public Builder clearGps() {
        if (gpsBuilder_ == null) {
          gps_ = GpsData.getDefaultInstance();
          onChanged();
        } else {
          gpsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public GpsData.Builder getGpsBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getGpsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      public GpsDataOrBuilder getGpsOrBuilder() {
        if (gpsBuilder_ != null) {
          return gpsBuilder_.getMessageOrBuilder();
        } else {
          return gps_;
        }
      }
      /**
       * <code>optional .GpsData gps = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          GpsData, GpsData.Builder, GpsDataOrBuilder>
          getGpsFieldBuilder() {
        if (gpsBuilder_ == null) {
          gpsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              GpsData, GpsData.Builder, GpsDataOrBuilder>(
                  getGps(),
                  getParentForChildren(),
                  isClean());
          gps_ = null;
        }
        return gpsBuilder_;
      }

      private AxisData acceleration_ = AxisData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder> accelerationBuilder_;
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public boolean hasAcceleration() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public AxisData getAcceleration() {
        if (accelerationBuilder_ == null) {
          return acceleration_;
        } else {
          return accelerationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder setAcceleration(AxisData value) {
        if (accelerationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          acceleration_ = value;
          onChanged();
        } else {
          accelerationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder setAcceleration(
          AxisData.Builder builderForValue) {
        if (accelerationBuilder_ == null) {
          acceleration_ = builderForValue.build();
          onChanged();
        } else {
          accelerationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder mergeAcceleration(AxisData value) {
        if (accelerationBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              acceleration_ != AxisData.getDefaultInstance()) {
            acceleration_ =
              AxisData.newBuilder(acceleration_).mergeFrom(value).buildPartial();
          } else {
            acceleration_ = value;
          }
          onChanged();
        } else {
          accelerationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public Builder clearAcceleration() {
        if (accelerationBuilder_ == null) {
          acceleration_ = AxisData.getDefaultInstance();
          onChanged();
        } else {
          accelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public AxisData.Builder getAccelerationBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getAccelerationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      public AxisDataOrBuilder getAccelerationOrBuilder() {
        if (accelerationBuilder_ != null) {
          return accelerationBuilder_.getMessageOrBuilder();
        } else {
          return acceleration_;
        }
      }
      /**
       * <code>optional .AxisData acceleration = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder>
          getAccelerationFieldBuilder() {
        if (accelerationBuilder_ == null) {
          accelerationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AxisData, AxisData.Builder, AxisDataOrBuilder>(
                  getAcceleration(),
                  getParentForChildren(),
                  isClean());
          acceleration_ = null;
        }
        return accelerationBuilder_;
      }

      private AxisData magnetism_ = AxisData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder> magnetismBuilder_;
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public boolean hasMagnetism() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public AxisData getMagnetism() {
        if (magnetismBuilder_ == null) {
          return magnetism_;
        } else {
          return magnetismBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder setMagnetism(AxisData value) {
        if (magnetismBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          magnetism_ = value;
          onChanged();
        } else {
          magnetismBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder setMagnetism(
          AxisData.Builder builderForValue) {
        if (magnetismBuilder_ == null) {
          magnetism_ = builderForValue.build();
          onChanged();
        } else {
          magnetismBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder mergeMagnetism(AxisData value) {
        if (magnetismBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              magnetism_ != AxisData.getDefaultInstance()) {
            magnetism_ =
              AxisData.newBuilder(magnetism_).mergeFrom(value).buildPartial();
          } else {
            magnetism_ = value;
          }
          onChanged();
        } else {
          magnetismBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public Builder clearMagnetism() {
        if (magnetismBuilder_ == null) {
          magnetism_ = AxisData.getDefaultInstance();
          onChanged();
        } else {
          magnetismBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public AxisData.Builder getMagnetismBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getMagnetismFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      public AxisDataOrBuilder getMagnetismOrBuilder() {
        if (magnetismBuilder_ != null) {
          return magnetismBuilder_.getMessageOrBuilder();
        } else {
          return magnetism_;
        }
      }
      /**
       * <code>optional .AxisData magnetism = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder>
          getMagnetismFieldBuilder() {
        if (magnetismBuilder_ == null) {
          magnetismBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AxisData, AxisData.Builder, AxisDataOrBuilder>(
                  getMagnetism(),
                  getParentForChildren(),
                  isClean());
          magnetism_ = null;
        }
        return magnetismBuilder_;
      }

      private AxisData gyroscope_ = AxisData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder> gyroscopeBuilder_;
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public boolean hasGyroscope() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public AxisData getGyroscope() {
        if (gyroscopeBuilder_ == null) {
          return gyroscope_;
        } else {
          return gyroscopeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder setGyroscope(AxisData value) {
        if (gyroscopeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gyroscope_ = value;
          onChanged();
        } else {
          gyroscopeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder setGyroscope(
          AxisData.Builder builderForValue) {
        if (gyroscopeBuilder_ == null) {
          gyroscope_ = builderForValue.build();
          onChanged();
        } else {
          gyroscopeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder mergeGyroscope(AxisData value) {
        if (gyroscopeBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              gyroscope_ != AxisData.getDefaultInstance()) {
            gyroscope_ =
              AxisData.newBuilder(gyroscope_).mergeFrom(value).buildPartial();
          } else {
            gyroscope_ = value;
          }
          onChanged();
        } else {
          gyroscopeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public Builder clearGyroscope() {
        if (gyroscopeBuilder_ == null) {
          gyroscope_ = AxisData.getDefaultInstance();
          onChanged();
        } else {
          gyroscopeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public AxisData.Builder getGyroscopeBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getGyroscopeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      public AxisDataOrBuilder getGyroscopeOrBuilder() {
        if (gyroscopeBuilder_ != null) {
          return gyroscopeBuilder_.getMessageOrBuilder();
        } else {
          return gyroscope_;
        }
      }
      /**
       * <code>optional .AxisData gyroscope = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          AxisData, AxisData.Builder, AxisDataOrBuilder>
          getGyroscopeFieldBuilder() {
        if (gyroscopeBuilder_ == null) {
          gyroscopeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              AxisData, AxisData.Builder, AxisDataOrBuilder>(
                  getGyroscope(),
                  getParentForChildren(),
                  isClean());
          gyroscope_ = null;
        }
        return gyroscopeBuilder_;
      }

      private SensorData temperature_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> temperatureBuilder_;
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public SensorData getTemperature() {
        if (temperatureBuilder_ == null) {
          return temperature_;
        } else {
          return temperatureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public Builder setTemperature(SensorData value) {
        if (temperatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          temperature_ = value;
          onChanged();
        } else {
          temperatureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public Builder setTemperature(
          SensorData.Builder builderForValue) {
        if (temperatureBuilder_ == null) {
          temperature_ = builderForValue.build();
          onChanged();
        } else {
          temperatureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public Builder mergeTemperature(SensorData value) {
        if (temperatureBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              temperature_ != SensorData.getDefaultInstance()) {
            temperature_ =
              SensorData.newBuilder(temperature_).mergeFrom(value).buildPartial();
          } else {
            temperature_ = value;
          }
          onChanged();
        } else {
          temperatureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public Builder clearTemperature() {
        if (temperatureBuilder_ == null) {
          temperature_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          temperatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public SensorData.Builder getTemperatureBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getTemperatureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      public SensorDataOrBuilder getTemperatureOrBuilder() {
        if (temperatureBuilder_ != null) {
          return temperatureBuilder_.getMessageOrBuilder();
        } else {
          return temperature_;
        }
      }
      /**
       * <code>optional .SensorData temperature = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getTemperatureFieldBuilder() {
        if (temperatureBuilder_ == null) {
          temperatureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getTemperature(),
                  getParentForChildren(),
                  isClean());
          temperature_ = null;
        }
        return temperatureBuilder_;
      }

      private SensorData humidity_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> humidityBuilder_;
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public boolean hasHumidity() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public SensorData getHumidity() {
        if (humidityBuilder_ == null) {
          return humidity_;
        } else {
          return humidityBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public Builder setHumidity(SensorData value) {
        if (humidityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          humidity_ = value;
          onChanged();
        } else {
          humidityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public Builder setHumidity(
          SensorData.Builder builderForValue) {
        if (humidityBuilder_ == null) {
          humidity_ = builderForValue.build();
          onChanged();
        } else {
          humidityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public Builder mergeHumidity(SensorData value) {
        if (humidityBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              humidity_ != SensorData.getDefaultInstance()) {
            humidity_ =
              SensorData.newBuilder(humidity_).mergeFrom(value).buildPartial();
          } else {
            humidity_ = value;
          }
          onChanged();
        } else {
          humidityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public Builder clearHumidity() {
        if (humidityBuilder_ == null) {
          humidity_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          humidityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public SensorData.Builder getHumidityBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getHumidityFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      public SensorDataOrBuilder getHumidityOrBuilder() {
        if (humidityBuilder_ != null) {
          return humidityBuilder_.getMessageOrBuilder();
        } else {
          return humidity_;
        }
      }
      /**
       * <code>optional .SensorData humidity = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getHumidityFieldBuilder() {
        if (humidityBuilder_ == null) {
          humidityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getHumidity(),
                  getParentForChildren(),
                  isClean());
          humidity_ = null;
        }
        return humidityBuilder_;
      }

      private SensorData light_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> lightBuilder_;
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public boolean hasLight() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public SensorData getLight() {
        if (lightBuilder_ == null) {
          return light_;
        } else {
          return lightBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public Builder setLight(SensorData value) {
        if (lightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          light_ = value;
          onChanged();
        } else {
          lightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public Builder setLight(
          SensorData.Builder builderForValue) {
        if (lightBuilder_ == null) {
          light_ = builderForValue.build();
          onChanged();
        } else {
          lightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public Builder mergeLight(SensorData value) {
        if (lightBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              light_ != SensorData.getDefaultInstance()) {
            light_ =
              SensorData.newBuilder(light_).mergeFrom(value).buildPartial();
          } else {
            light_ = value;
          }
          onChanged();
        } else {
          lightBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public Builder clearLight() {
        if (lightBuilder_ == null) {
          light_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          lightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public SensorData.Builder getLightBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getLightFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      public SensorDataOrBuilder getLightOrBuilder() {
        if (lightBuilder_ != null) {
          return lightBuilder_.getMessageOrBuilder();
        } else {
          return light_;
        }
      }
      /**
       * <code>optional .SensorData light = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLightFieldBuilder() {
        if (lightBuilder_ == null) {
          lightBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getLight(),
                  getParentForChildren(),
                  isClean());
          light_ = null;
        }
        return lightBuilder_;
      }

      private SensorData leak_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> leakBuilder_;
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public boolean hasLeak() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public SensorData getLeak() {
        if (leakBuilder_ == null) {
          return leak_;
        } else {
          return leakBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder setLeak(SensorData value) {
        if (leakBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leak_ = value;
          onChanged();
        } else {
          leakBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder setLeak(
          SensorData.Builder builderForValue) {
        if (leakBuilder_ == null) {
          leak_ = builderForValue.build();
          onChanged();
        } else {
          leakBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder mergeLeak(SensorData value) {
        if (leakBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              leak_ != SensorData.getDefaultInstance()) {
            leak_ =
              SensorData.newBuilder(leak_).mergeFrom(value).buildPartial();
          } else {
            leak_ = value;
          }
          onChanged();
        } else {
          leakBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public Builder clearLeak() {
        if (leakBuilder_ == null) {
          leak_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          leakBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public SensorData.Builder getLeakBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getLeakFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      public SensorDataOrBuilder getLeakOrBuilder() {
        if (leakBuilder_ != null) {
          return leakBuilder_.getMessageOrBuilder();
        } else {
          return leak_;
        }
      }
      /**
       * <code>optional .SensorData leak = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLeakFieldBuilder() {
        if (leakBuilder_ == null) {
          leakBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getLeak(),
                  getParentForChildren(),
                  isClean());
          leak_ = null;
        }
        return leakBuilder_;
      }

      private SensorData co_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> coBuilder_;
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public boolean hasCo() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public SensorData getCo() {
        if (coBuilder_ == null) {
          return co_;
        } else {
          return coBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder setCo(SensorData value) {
        if (coBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          co_ = value;
          onChanged();
        } else {
          coBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder setCo(
          SensorData.Builder builderForValue) {
        if (coBuilder_ == null) {
          co_ = builderForValue.build();
          onChanged();
        } else {
          coBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder mergeCo(SensorData value) {
        if (coBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              co_ != SensorData.getDefaultInstance()) {
            co_ =
              SensorData.newBuilder(co_).mergeFrom(value).buildPartial();
          } else {
            co_ = value;
          }
          onChanged();
        } else {
          coBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public Builder clearCo() {
        if (coBuilder_ == null) {
          co_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          coBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public SensorData.Builder getCoBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getCoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      public SensorDataOrBuilder getCoOrBuilder() {
        if (coBuilder_ != null) {
          return coBuilder_.getMessageOrBuilder();
        } else {
          return co_;
        }
      }
      /**
       * <code>optional .SensorData co = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCoFieldBuilder() {
        if (coBuilder_ == null) {
          coBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getCo(),
                  getParentForChildren(),
                  isClean());
          co_ = null;
        }
        return coBuilder_;
      }

      private SensorData co2_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> co2Builder_;
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public boolean hasCo2() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public SensorData getCo2() {
        if (co2Builder_ == null) {
          return co2_;
        } else {
          return co2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder setCo2(SensorData value) {
        if (co2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          co2_ = value;
          onChanged();
        } else {
          co2Builder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder setCo2(
          SensorData.Builder builderForValue) {
        if (co2Builder_ == null) {
          co2_ = builderForValue.build();
          onChanged();
        } else {
          co2Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder mergeCo2(SensorData value) {
        if (co2Builder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              co2_ != SensorData.getDefaultInstance()) {
            co2_ =
              SensorData.newBuilder(co2_).mergeFrom(value).buildPartial();
          } else {
            co2_ = value;
          }
          onChanged();
        } else {
          co2Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public Builder clearCo2() {
        if (co2Builder_ == null) {
          co2_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          co2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public SensorData.Builder getCo2Builder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getCo2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      public SensorDataOrBuilder getCo2OrBuilder() {
        if (co2Builder_ != null) {
          return co2Builder_.getMessageOrBuilder();
        } else {
          return co2_;
        }
      }
      /**
       * <code>optional .SensorData co2 = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCo2FieldBuilder() {
        if (co2Builder_ == null) {
          co2Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getCo2(),
                  getParentForChildren(),
                  isClean());
          co2_ = null;
        }
        return co2Builder_;
      }

      private SensorData so2_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> so2Builder_;
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public boolean hasSo2() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public SensorData getSo2() {
        if (so2Builder_ == null) {
          return so2_;
        } else {
          return so2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder setSo2(SensorData value) {
        if (so2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          so2_ = value;
          onChanged();
        } else {
          so2Builder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder setSo2(
          SensorData.Builder builderForValue) {
        if (so2Builder_ == null) {
          so2_ = builderForValue.build();
          onChanged();
        } else {
          so2Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder mergeSo2(SensorData value) {
        if (so2Builder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              so2_ != SensorData.getDefaultInstance()) {
            so2_ =
              SensorData.newBuilder(so2_).mergeFrom(value).buildPartial();
          } else {
            so2_ = value;
          }
          onChanged();
        } else {
          so2Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public Builder clearSo2() {
        if (so2Builder_ == null) {
          so2_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          so2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public SensorData.Builder getSo2Builder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getSo2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      public SensorDataOrBuilder getSo2OrBuilder() {
        if (so2Builder_ != null) {
          return so2Builder_.getMessageOrBuilder();
        } else {
          return so2_;
        }
      }
      /**
       * <code>optional .SensorData so2 = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getSo2FieldBuilder() {
        if (so2Builder_ == null) {
          so2Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getSo2(),
                  getParentForChildren(),
                  isClean());
          so2_ = null;
        }
        return so2Builder_;
      }

      private SensorData no2_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> no2Builder_;
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public boolean hasNo2() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public SensorData getNo2() {
        if (no2Builder_ == null) {
          return no2_;
        } else {
          return no2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder setNo2(SensorData value) {
        if (no2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          no2_ = value;
          onChanged();
        } else {
          no2Builder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder setNo2(
          SensorData.Builder builderForValue) {
        if (no2Builder_ == null) {
          no2_ = builderForValue.build();
          onChanged();
        } else {
          no2Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder mergeNo2(SensorData value) {
        if (no2Builder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              no2_ != SensorData.getDefaultInstance()) {
            no2_ =
              SensorData.newBuilder(no2_).mergeFrom(value).buildPartial();
          } else {
            no2_ = value;
          }
          onChanged();
        } else {
          no2Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public Builder clearNo2() {
        if (no2Builder_ == null) {
          no2_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          no2Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public SensorData.Builder getNo2Builder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getNo2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      public SensorDataOrBuilder getNo2OrBuilder() {
        if (no2Builder_ != null) {
          return no2Builder_.getMessageOrBuilder();
        } else {
          return no2_;
        }
      }
      /**
       * <code>optional .SensorData no2 = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getNo2FieldBuilder() {
        if (no2Builder_ == null) {
          no2Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getNo2(),
                  getParentForChildren(),
                  isClean());
          no2_ = null;
        }
        return no2Builder_;
      }

      private SensorData ch4_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> ch4Builder_;
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public boolean hasCh4() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public SensorData getCh4() {
        if (ch4Builder_ == null) {
          return ch4_;
        } else {
          return ch4Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder setCh4(SensorData value) {
        if (ch4Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ch4_ = value;
          onChanged();
        } else {
          ch4Builder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder setCh4(
          SensorData.Builder builderForValue) {
        if (ch4Builder_ == null) {
          ch4_ = builderForValue.build();
          onChanged();
        } else {
          ch4Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder mergeCh4(SensorData value) {
        if (ch4Builder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              ch4_ != SensorData.getDefaultInstance()) {
            ch4_ =
              SensorData.newBuilder(ch4_).mergeFrom(value).buildPartial();
          } else {
            ch4_ = value;
          }
          onChanged();
        } else {
          ch4Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public Builder clearCh4() {
        if (ch4Builder_ == null) {
          ch4_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          ch4Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public SensorData.Builder getCh4Builder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getCh4FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      public SensorDataOrBuilder getCh4OrBuilder() {
        if (ch4Builder_ != null) {
          return ch4Builder_.getMessageOrBuilder();
        } else {
          return ch4_;
        }
      }
      /**
       * <code>optional .SensorData ch4 = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCh4FieldBuilder() {
        if (ch4Builder_ == null) {
          ch4Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getCh4(),
                  getParentForChildren(),
                  isClean());
          ch4_ = null;
        }
        return ch4Builder_;
      }

      private SensorData ch2O_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> ch2OBuilder_;
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public boolean hasCh2O() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public SensorData getCh2O() {
        if (ch2OBuilder_ == null) {
          return ch2O_;
        } else {
          return ch2OBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder setCh2O(SensorData value) {
        if (ch2OBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ch2O_ = value;
          onChanged();
        } else {
          ch2OBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder setCh2O(
          SensorData.Builder builderForValue) {
        if (ch2OBuilder_ == null) {
          ch2O_ = builderForValue.build();
          onChanged();
        } else {
          ch2OBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder mergeCh2O(SensorData value) {
        if (ch2OBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              ch2O_ != SensorData.getDefaultInstance()) {
            ch2O_ =
              SensorData.newBuilder(ch2O_).mergeFrom(value).buildPartial();
          } else {
            ch2O_ = value;
          }
          onChanged();
        } else {
          ch2OBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public Builder clearCh2O() {
        if (ch2OBuilder_ == null) {
          ch2O_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          ch2OBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public SensorData.Builder getCh2OBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getCh2OFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      public SensorDataOrBuilder getCh2OOrBuilder() {
        if (ch2OBuilder_ != null) {
          return ch2OBuilder_.getMessageOrBuilder();
        } else {
          return ch2O_;
        }
      }
      /**
       * <code>optional .SensorData ch2o = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCh2OFieldBuilder() {
        if (ch2OBuilder_ == null) {
          ch2OBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getCh2O(),
                  getParentForChildren(),
                  isClean());
          ch2O_ = null;
        }
        return ch2OBuilder_;
      }

      private SensorData lpg_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> lpgBuilder_;
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public boolean hasLpg() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public SensorData getLpg() {
        if (lpgBuilder_ == null) {
          return lpg_;
        } else {
          return lpgBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder setLpg(SensorData value) {
        if (lpgBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lpg_ = value;
          onChanged();
        } else {
          lpgBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder setLpg(
          SensorData.Builder builderForValue) {
        if (lpgBuilder_ == null) {
          lpg_ = builderForValue.build();
          onChanged();
        } else {
          lpgBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder mergeLpg(SensorData value) {
        if (lpgBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              lpg_ != SensorData.getDefaultInstance()) {
            lpg_ =
              SensorData.newBuilder(lpg_).mergeFrom(value).buildPartial();
          } else {
            lpg_ = value;
          }
          onChanged();
        } else {
          lpgBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public Builder clearLpg() {
        if (lpgBuilder_ == null) {
          lpg_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          lpgBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public SensorData.Builder getLpgBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getLpgFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      public SensorDataOrBuilder getLpgOrBuilder() {
        if (lpgBuilder_ != null) {
          return lpgBuilder_.getMessageOrBuilder();
        } else {
          return lpg_;
        }
      }
      /**
       * <code>optional .SensorData lpg = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLpgFieldBuilder() {
        if (lpgBuilder_ == null) {
          lpgBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getLpg(),
                  getParentForChildren(),
                  isClean());
          lpg_ = null;
        }
        return lpgBuilder_;
      }

      private SensorData o3_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> o3Builder_;
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public boolean hasO3() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public SensorData getO3() {
        if (o3Builder_ == null) {
          return o3_;
        } else {
          return o3Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder setO3(SensorData value) {
        if (o3Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          o3_ = value;
          onChanged();
        } else {
          o3Builder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder setO3(
          SensorData.Builder builderForValue) {
        if (o3Builder_ == null) {
          o3_ = builderForValue.build();
          onChanged();
        } else {
          o3Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder mergeO3(SensorData value) {
        if (o3Builder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              o3_ != SensorData.getDefaultInstance()) {
            o3_ =
              SensorData.newBuilder(o3_).mergeFrom(value).buildPartial();
          } else {
            o3_ = value;
          }
          onChanged();
        } else {
          o3Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public Builder clearO3() {
        if (o3Builder_ == null) {
          o3_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          o3Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public SensorData.Builder getO3Builder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getO3FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      public SensorDataOrBuilder getO3OrBuilder() {
        if (o3Builder_ != null) {
          return o3Builder_.getMessageOrBuilder();
        } else {
          return o3_;
        }
      }
      /**
       * <code>optional .SensorData o3 = 23;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getO3FieldBuilder() {
        if (o3Builder_ == null) {
          o3Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getO3(),
                  getParentForChildren(),
                  isClean());
          o3_ = null;
        }
        return o3Builder_;
      }

      private SensorData pm1_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pm1Builder_;
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public boolean hasPm1() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public SensorData getPm1() {
        if (pm1Builder_ == null) {
          return pm1_;
        } else {
          return pm1Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder setPm1(SensorData value) {
        if (pm1Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pm1_ = value;
          onChanged();
        } else {
          pm1Builder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder setPm1(
          SensorData.Builder builderForValue) {
        if (pm1Builder_ == null) {
          pm1_ = builderForValue.build();
          onChanged();
        } else {
          pm1Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder mergePm1(SensorData value) {
        if (pm1Builder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              pm1_ != SensorData.getDefaultInstance()) {
            pm1_ =
              SensorData.newBuilder(pm1_).mergeFrom(value).buildPartial();
          } else {
            pm1_ = value;
          }
          onChanged();
        } else {
          pm1Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public Builder clearPm1() {
        if (pm1Builder_ == null) {
          pm1_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pm1Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public SensorData.Builder getPm1Builder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getPm1FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      public SensorDataOrBuilder getPm1OrBuilder() {
        if (pm1Builder_ != null) {
          return pm1Builder_.getMessageOrBuilder();
        } else {
          return pm1_;
        }
      }
      /**
       * <code>optional .SensorData pm1 = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPm1FieldBuilder() {
        if (pm1Builder_ == null) {
          pm1Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getPm1(),
                  getParentForChildren(),
                  isClean());
          pm1_ = null;
        }
        return pm1Builder_;
      }

      private SensorData pm25_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pm25Builder_;
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public boolean hasPm25() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public SensorData getPm25() {
        if (pm25Builder_ == null) {
          return pm25_;
        } else {
          return pm25Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder setPm25(SensorData value) {
        if (pm25Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pm25_ = value;
          onChanged();
        } else {
          pm25Builder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder setPm25(
          SensorData.Builder builderForValue) {
        if (pm25Builder_ == null) {
          pm25_ = builderForValue.build();
          onChanged();
        } else {
          pm25Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder mergePm25(SensorData value) {
        if (pm25Builder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              pm25_ != SensorData.getDefaultInstance()) {
            pm25_ =
              SensorData.newBuilder(pm25_).mergeFrom(value).buildPartial();
          } else {
            pm25_ = value;
          }
          onChanged();
        } else {
          pm25Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public Builder clearPm25() {
        if (pm25Builder_ == null) {
          pm25_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pm25Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public SensorData.Builder getPm25Builder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getPm25FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      public SensorDataOrBuilder getPm25OrBuilder() {
        if (pm25Builder_ != null) {
          return pm25Builder_.getMessageOrBuilder();
        } else {
          return pm25_;
        }
      }
      /**
       * <code>optional .SensorData pm2_5 = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPm25FieldBuilder() {
        if (pm25Builder_ == null) {
          pm25Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getPm25(),
                  getParentForChildren(),
                  isClean());
          pm25_ = null;
        }
        return pm25Builder_;
      }

      private SensorData pm10_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pm10Builder_;
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public boolean hasPm10() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public SensorData getPm10() {
        if (pm10Builder_ == null) {
          return pm10_;
        } else {
          return pm10Builder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder setPm10(SensorData value) {
        if (pm10Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pm10_ = value;
          onChanged();
        } else {
          pm10Builder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder setPm10(
          SensorData.Builder builderForValue) {
        if (pm10Builder_ == null) {
          pm10_ = builderForValue.build();
          onChanged();
        } else {
          pm10Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder mergePm10(SensorData value) {
        if (pm10Builder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000) &&
              pm10_ != SensorData.getDefaultInstance()) {
            pm10_ =
              SensorData.newBuilder(pm10_).mergeFrom(value).buildPartial();
          } else {
            pm10_ = value;
          }
          onChanged();
        } else {
          pm10Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public Builder clearPm10() {
        if (pm10Builder_ == null) {
          pm10_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pm10Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public SensorData.Builder getPm10Builder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getPm10FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      public SensorDataOrBuilder getPm10OrBuilder() {
        if (pm10Builder_ != null) {
          return pm10Builder_.getMessageOrBuilder();
        } else {
          return pm10_;
        }
      }
      /**
       * <code>optional .SensorData pm10 = 26;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPm10FieldBuilder() {
        if (pm10Builder_ == null) {
          pm10Builder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getPm10(),
                  getParentForChildren(),
                  isClean());
          pm10_ = null;
        }
        return pm10Builder_;
      }

      private SensorData angle_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> angleBuilder_;
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public boolean hasAngle() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public SensorData getAngle() {
        if (angleBuilder_ == null) {
          return angle_;
        } else {
          return angleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder setAngle(SensorData value) {
        if (angleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          angle_ = value;
          onChanged();
        } else {
          angleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder setAngle(
          SensorData.Builder builderForValue) {
        if (angleBuilder_ == null) {
          angle_ = builderForValue.build();
          onChanged();
        } else {
          angleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder mergeAngle(SensorData value) {
        if (angleBuilder_ == null) {
          if (((bitField0_ & 0x04000000) == 0x04000000) &&
              angle_ != SensorData.getDefaultInstance()) {
            angle_ =
              SensorData.newBuilder(angle_).mergeFrom(value).buildPartial();
          } else {
            angle_ = value;
          }
          onChanged();
        } else {
          angleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public Builder clearAngle() {
        if (angleBuilder_ == null) {
          angle_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          angleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public SensorData.Builder getAngleBuilder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getAngleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      public SensorDataOrBuilder getAngleOrBuilder() {
        if (angleBuilder_ != null) {
          return angleBuilder_.getMessageOrBuilder();
        } else {
          return angle_;
        }
      }
      /**
       * <code>optional .SensorData angle = 27;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getAngleFieldBuilder() {
        if (angleBuilder_ == null) {
          angleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getAngle(),
                  getParentForChildren(),
                  isClean());
          angle_ = null;
        }
        return angleBuilder_;
      }

      private SensorData cover_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> coverBuilder_;
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public boolean hasCover() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public SensorData getCover() {
        if (coverBuilder_ == null) {
          return cover_;
        } else {
          return coverBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder setCover(SensorData value) {
        if (coverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cover_ = value;
          onChanged();
        } else {
          coverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder setCover(
          SensorData.Builder builderForValue) {
        if (coverBuilder_ == null) {
          cover_ = builderForValue.build();
          onChanged();
        } else {
          coverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder mergeCover(SensorData value) {
        if (coverBuilder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              cover_ != SensorData.getDefaultInstance()) {
            cover_ =
              SensorData.newBuilder(cover_).mergeFrom(value).buildPartial();
          } else {
            cover_ = value;
          }
          onChanged();
        } else {
          coverBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public Builder clearCover() {
        if (coverBuilder_ == null) {
          cover_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          coverBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public SensorData.Builder getCoverBuilder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getCoverFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      public SensorDataOrBuilder getCoverOrBuilder() {
        if (coverBuilder_ != null) {
          return coverBuilder_.getMessageOrBuilder();
        } else {
          return cover_;
        }
      }
      /**
       * <code>optional .SensorData cover = 28;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getCoverFieldBuilder() {
        if (coverBuilder_ == null) {
          coverBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getCover(),
                  getParentForChildren(),
                  isClean());
          cover_ = null;
        }
        return coverBuilder_;
      }

      private SensorData level_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> levelBuilder_;
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public SensorData getLevel() {
        if (levelBuilder_ == null) {
          return level_;
        } else {
          return levelBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder setLevel(SensorData value) {
        if (levelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          level_ = value;
          onChanged();
        } else {
          levelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder setLevel(
          SensorData.Builder builderForValue) {
        if (levelBuilder_ == null) {
          level_ = builderForValue.build();
          onChanged();
        } else {
          levelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder mergeLevel(SensorData value) {
        if (levelBuilder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              level_ != SensorData.getDefaultInstance()) {
            level_ =
              SensorData.newBuilder(level_).mergeFrom(value).buildPartial();
          } else {
            level_ = value;
          }
          onChanged();
        } else {
          levelBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public Builder clearLevel() {
        if (levelBuilder_ == null) {
          level_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          levelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public SensorData.Builder getLevelBuilder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getLevelFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      public SensorDataOrBuilder getLevelOrBuilder() {
        if (levelBuilder_ != null) {
          return levelBuilder_.getMessageOrBuilder();
        } else {
          return level_;
        }
      }
      /**
       * <code>optional .SensorData level = 29;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getLevelFieldBuilder() {
        if (levelBuilder_ == null) {
          levelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getLevel(),
                  getParentForChildren(),
                  isClean());
          level_ = null;
        }
        return levelBuilder_;
      }

      private SensorData smoke_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> smokeBuilder_;
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public boolean hasSmoke() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public SensorData getSmoke() {
        if (smokeBuilder_ == null) {
          return smoke_;
        } else {
          return smokeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder setSmoke(SensorData value) {
        if (smokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          smoke_ = value;
          onChanged();
        } else {
          smokeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder setSmoke(
          SensorData.Builder builderForValue) {
        if (smokeBuilder_ == null) {
          smoke_ = builderForValue.build();
          onChanged();
        } else {
          smokeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder mergeSmoke(SensorData value) {
        if (smokeBuilder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              smoke_ != SensorData.getDefaultInstance()) {
            smoke_ =
              SensorData.newBuilder(smoke_).mergeFrom(value).buildPartial();
          } else {
            smoke_ = value;
          }
          onChanged();
        } else {
          smokeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public Builder clearSmoke() {
        if (smokeBuilder_ == null) {
          smoke_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          smokeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public SensorData.Builder getSmokeBuilder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getSmokeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      public SensorDataOrBuilder getSmokeOrBuilder() {
        if (smokeBuilder_ != null) {
          return smokeBuilder_.getMessageOrBuilder();
        } else {
          return smoke_;
        }
      }
      /**
       * <code>optional .SensorData smoke = 30;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getSmokeFieldBuilder() {
        if (smokeBuilder_ == null) {
          smokeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getSmoke(),
                  getParentForChildren(),
                  isClean());
          smoke_ = null;
        }
        return smokeBuilder_;
      }

      private SensorData pitch_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> pitchBuilder_;
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public boolean hasPitch() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public SensorData getPitch() {
        if (pitchBuilder_ == null) {
          return pitch_;
        } else {
          return pitchBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder setPitch(SensorData value) {
        if (pitchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pitch_ = value;
          onChanged();
        } else {
          pitchBuilder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder setPitch(
          SensorData.Builder builderForValue) {
        if (pitchBuilder_ == null) {
          pitch_ = builderForValue.build();
          onChanged();
        } else {
          pitchBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder mergePitch(SensorData value) {
        if (pitchBuilder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              pitch_ != SensorData.getDefaultInstance()) {
            pitch_ =
              SensorData.newBuilder(pitch_).mergeFrom(value).buildPartial();
          } else {
            pitch_ = value;
          }
          onChanged();
        } else {
          pitchBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public Builder clearPitch() {
        if (pitchBuilder_ == null) {
          pitch_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          pitchBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public SensorData.Builder getPitchBuilder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getPitchFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      public SensorDataOrBuilder getPitchOrBuilder() {
        if (pitchBuilder_ != null) {
          return pitchBuilder_.getMessageOrBuilder();
        } else {
          return pitch_;
        }
      }
      /**
       * <code>optional .SensorData pitch = 31;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getPitchFieldBuilder() {
        if (pitchBuilder_ == null) {
          pitchBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getPitch(),
                  getParentForChildren(),
                  isClean());
          pitch_ = null;
        }
        return pitchBuilder_;
      }

      private SensorData roll_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> rollBuilder_;
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public boolean hasRoll() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public SensorData getRoll() {
        if (rollBuilder_ == null) {
          return roll_;
        } else {
          return rollBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder setRoll(SensorData value) {
        if (rollBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roll_ = value;
          onChanged();
        } else {
          rollBuilder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder setRoll(
          SensorData.Builder builderForValue) {
        if (rollBuilder_ == null) {
          roll_ = builderForValue.build();
          onChanged();
        } else {
          rollBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder mergeRoll(SensorData value) {
        if (rollBuilder_ == null) {
          if (((bitField0_ & 0x80000000) == 0x80000000) &&
              roll_ != SensorData.getDefaultInstance()) {
            roll_ =
              SensorData.newBuilder(roll_).mergeFrom(value).buildPartial();
          } else {
            roll_ = value;
          }
          onChanged();
        } else {
          rollBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public Builder clearRoll() {
        if (rollBuilder_ == null) {
          roll_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          rollBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public SensorData.Builder getRollBuilder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getRollFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      public SensorDataOrBuilder getRollOrBuilder() {
        if (rollBuilder_ != null) {
          return rollBuilder_.getMessageOrBuilder();
        } else {
          return roll_;
        }
      }
      /**
       * <code>optional .SensorData roll = 32;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getRollFieldBuilder() {
        if (rollBuilder_ == null) {
          rollBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getRoll(),
                  getParentForChildren(),
                  isClean());
          roll_ = null;
        }
        return rollBuilder_;
      }

      private SensorData yaw_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> yawBuilder_;
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public boolean hasYaw() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public SensorData getYaw() {
        if (yawBuilder_ == null) {
          return yaw_;
        } else {
          return yawBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder setYaw(SensorData value) {
        if (yawBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          yaw_ = value;
          onChanged();
        } else {
          yawBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder setYaw(
          SensorData.Builder builderForValue) {
        if (yawBuilder_ == null) {
          yaw_ = builderForValue.build();
          onChanged();
        } else {
          yawBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder mergeYaw(SensorData value) {
        if (yawBuilder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001) &&
              yaw_ != SensorData.getDefaultInstance()) {
            yaw_ =
              SensorData.newBuilder(yaw_).mergeFrom(value).buildPartial();
          } else {
            yaw_ = value;
          }
          onChanged();
        } else {
          yawBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public Builder clearYaw() {
        if (yawBuilder_ == null) {
          yaw_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          yawBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public SensorData.Builder getYawBuilder() {
        bitField1_ |= 0x00000001;
        onChanged();
        return getYawFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      public SensorDataOrBuilder getYawOrBuilder() {
        if (yawBuilder_ != null) {
          return yawBuilder_.getMessageOrBuilder();
        } else {
          return yaw_;
        }
      }
      /**
       * <code>optional .SensorData yaw = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getYawFieldBuilder() {
        if (yawBuilder_ == null) {
          yawBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getYaw(),
                  getParentForChildren(),
                  isClean());
          yaw_ = null;
        }
        return yawBuilder_;
      }

      private SensorDataInt flame_ = SensorDataInt.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder> flameBuilder_;
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public boolean hasFlame() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public SensorDataInt getFlame() {
        if (flameBuilder_ == null) {
          return flame_;
        } else {
          return flameBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder setFlame(SensorDataInt value) {
        if (flameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flame_ = value;
          onChanged();
        } else {
          flameBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder setFlame(
          SensorDataInt.Builder builderForValue) {
        if (flameBuilder_ == null) {
          flame_ = builderForValue.build();
          onChanged();
        } else {
          flameBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder mergeFlame(SensorDataInt value) {
        if (flameBuilder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              flame_ != SensorDataInt.getDefaultInstance()) {
            flame_ =
              SensorDataInt.newBuilder(flame_).mergeFrom(value).buildPartial();
          } else {
            flame_ = value;
          }
          onChanged();
        } else {
          flameBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public Builder clearFlame() {
        if (flameBuilder_ == null) {
          flame_ = SensorDataInt.getDefaultInstance();
          onChanged();
        } else {
          flameBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public SensorDataInt.Builder getFlameBuilder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getFlameFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      public SensorDataIntOrBuilder getFlameOrBuilder() {
        if (flameBuilder_ != null) {
          return flameBuilder_.getMessageOrBuilder();
        } else {
          return flame_;
        }
      }
      /**
       * <code>optional .SensorDataInt flame = 34;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder>
          getFlameFieldBuilder() {
        if (flameBuilder_ == null) {
          flameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder>(
                  getFlame(),
                  getParentForChildren(),
                  isClean());
          flame_ = null;
        }
        return flameBuilder_;
      }

      private SensorData artificialGas_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> artificialGasBuilder_;
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public boolean hasArtificialGas() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public SensorData getArtificialGas() {
        if (artificialGasBuilder_ == null) {
          return artificialGas_;
        } else {
          return artificialGasBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder setArtificialGas(SensorData value) {
        if (artificialGasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          artificialGas_ = value;
          onChanged();
        } else {
          artificialGasBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder setArtificialGas(
          SensorData.Builder builderForValue) {
        if (artificialGasBuilder_ == null) {
          artificialGas_ = builderForValue.build();
          onChanged();
        } else {
          artificialGasBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder mergeArtificialGas(SensorData value) {
        if (artificialGasBuilder_ == null) {
          if (((bitField1_ & 0x00000004) == 0x00000004) &&
              artificialGas_ != SensorData.getDefaultInstance()) {
            artificialGas_ =
              SensorData.newBuilder(artificialGas_).mergeFrom(value).buildPartial();
          } else {
            artificialGas_ = value;
          }
          onChanged();
        } else {
          artificialGasBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public Builder clearArtificialGas() {
        if (artificialGasBuilder_ == null) {
          artificialGas_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          artificialGasBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public SensorData.Builder getArtificialGasBuilder() {
        bitField1_ |= 0x00000004;
        onChanged();
        return getArtificialGasFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      public SensorDataOrBuilder getArtificialGasOrBuilder() {
        if (artificialGasBuilder_ != null) {
          return artificialGasBuilder_.getMessageOrBuilder();
        } else {
          return artificialGas_;
        }
      }
      /**
       * <code>optional .SensorData artificialGas = 35;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getArtificialGasFieldBuilder() {
        if (artificialGasBuilder_ == null) {
          artificialGasBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getArtificialGas(),
                  getParentForChildren(),
                  isClean());
          artificialGas_ = null;
        }
        return artificialGasBuilder_;
      }

      private java.util.List<SensorDataInt> tempArray_ =
        java.util.Collections.emptyList();
      private void ensureTempArrayIsMutable() {
        if (!((bitField1_ & 0x00000008) == 0x00000008)) {
          tempArray_ = new java.util.ArrayList<SensorDataInt>(tempArray_);
          bitField1_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder> tempArrayBuilder_;

      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public java.util.List<SensorDataInt> getTempArrayList() {
        if (tempArrayBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tempArray_);
        } else {
          return tempArrayBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public int getTempArrayCount() {
        if (tempArrayBuilder_ == null) {
          return tempArray_.size();
        } else {
          return tempArrayBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public SensorDataInt getTempArray(int index) {
        if (tempArrayBuilder_ == null) {
          return tempArray_.get(index);
        } else {
          return tempArrayBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder setTempArray(
          int index, SensorDataInt value) {
        if (tempArrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTempArrayIsMutable();
          tempArray_.set(index, value);
          onChanged();
        } else {
          tempArrayBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder setTempArray(
          int index, SensorDataInt.Builder builderForValue) {
        if (tempArrayBuilder_ == null) {
          ensureTempArrayIsMutable();
          tempArray_.set(index, builderForValue.build());
          onChanged();
        } else {
          tempArrayBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder addTempArray(SensorDataInt value) {
        if (tempArrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTempArrayIsMutable();
          tempArray_.add(value);
          onChanged();
        } else {
          tempArrayBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder addTempArray(
          int index, SensorDataInt value) {
        if (tempArrayBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTempArrayIsMutable();
          tempArray_.add(index, value);
          onChanged();
        } else {
          tempArrayBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder addTempArray(
          SensorDataInt.Builder builderForValue) {
        if (tempArrayBuilder_ == null) {
          ensureTempArrayIsMutable();
          tempArray_.add(builderForValue.build());
          onChanged();
        } else {
          tempArrayBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder addTempArray(
          int index, SensorDataInt.Builder builderForValue) {
        if (tempArrayBuilder_ == null) {
          ensureTempArrayIsMutable();
          tempArray_.add(index, builderForValue.build());
          onChanged();
        } else {
          tempArrayBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder addAllTempArray(
          Iterable<? extends SensorDataInt> values) {
        if (tempArrayBuilder_ == null) {
          ensureTempArrayIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tempArray_);
          onChanged();
        } else {
          tempArrayBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder clearTempArray() {
        if (tempArrayBuilder_ == null) {
          tempArray_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000008);
          onChanged();
        } else {
          tempArrayBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public Builder removeTempArray(int index) {
        if (tempArrayBuilder_ == null) {
          ensureTempArrayIsMutable();
          tempArray_.remove(index);
          onChanged();
        } else {
          tempArrayBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public SensorDataInt.Builder getTempArrayBuilder(
          int index) {
        return getTempArrayFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public SensorDataIntOrBuilder getTempArrayOrBuilder(
          int index) {
        if (tempArrayBuilder_ == null) {
          return tempArray_.get(index);  } else {
          return tempArrayBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public java.util.List<? extends SensorDataIntOrBuilder>
           getTempArrayOrBuilderList() {
        if (tempArrayBuilder_ != null) {
          return tempArrayBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tempArray_);
        }
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public SensorDataInt.Builder addTempArrayBuilder() {
        return getTempArrayFieldBuilder().addBuilder(
            SensorDataInt.getDefaultInstance());
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public SensorDataInt.Builder addTempArrayBuilder(
          int index) {
        return getTempArrayFieldBuilder().addBuilder(
            index, SensorDataInt.getDefaultInstance());
      }
      /**
       * <code>repeated .SensorDataInt tempArray = 36;</code>
       */
      public java.util.List<SensorDataInt.Builder>
           getTempArrayBuilderList() {
        return getTempArrayFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder>
          getTempArrayFieldBuilder() {
        if (tempArrayBuilder_ == null) {
          tempArrayBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              SensorDataInt, SensorDataInt.Builder, SensorDataIntOrBuilder>(
                  tempArray_,
                  ((bitField1_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          tempArray_ = null;
        }
        return tempArrayBuilder_;
      }

      private SensorData waterPressure_ = SensorData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder> waterPressureBuilder_;
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public boolean hasWaterPressure() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public SensorData getWaterPressure() {
        if (waterPressureBuilder_ == null) {
          return waterPressure_;
        } else {
          return waterPressureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder setWaterPressure(SensorData value) {
        if (waterPressureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          waterPressure_ = value;
          onChanged();
        } else {
          waterPressureBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder setWaterPressure(
          SensorData.Builder builderForValue) {
        if (waterPressureBuilder_ == null) {
          waterPressure_ = builderForValue.build();
          onChanged();
        } else {
          waterPressureBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder mergeWaterPressure(SensorData value) {
        if (waterPressureBuilder_ == null) {
          if (((bitField1_ & 0x00000010) == 0x00000010) &&
              waterPressure_ != SensorData.getDefaultInstance()) {
            waterPressure_ =
              SensorData.newBuilder(waterPressure_).mergeFrom(value).buildPartial();
          } else {
            waterPressure_ = value;
          }
          onChanged();
        } else {
          waterPressureBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public Builder clearWaterPressure() {
        if (waterPressureBuilder_ == null) {
          waterPressure_ = SensorData.getDefaultInstance();
          onChanged();
        } else {
          waterPressureBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public SensorData.Builder getWaterPressureBuilder() {
        bitField1_ |= 0x00000010;
        onChanged();
        return getWaterPressureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      public SensorDataOrBuilder getWaterPressureOrBuilder() {
        if (waterPressureBuilder_ != null) {
          return waterPressureBuilder_.getMessageOrBuilder();
        } else {
          return waterPressure_;
        }
      }
      /**
       * <code>optional .SensorData waterPressure = 37;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          SensorData, SensorData.Builder, SensorDataOrBuilder>
          getWaterPressureFieldBuilder() {
        if (waterPressureBuilder_ == null) {
          waterPressureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              SensorData, SensorData.Builder, SensorDataOrBuilder>(
                  getWaterPressure(),
                  getParentForChildren(),
                  isClean());
          waterPressure_ = null;
        }
        return waterPressureBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:MsgNode)
    }

    static {
      defaultInstance = new MsgNode(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MsgNode)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_LoraParam_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_LoraParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_BleParam_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_BleParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorDataInt_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorDataInt_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorDataFloat_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorDataFloat_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_GpsData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GpsData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AxisData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AxisData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AppParam_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_AppParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MsgNode_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MsgNode_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\024MsgNode_1v1_m5.proto\"\320\002\n\tLoraParam\022\016\n\006" +
      "devEui\030\001 \001(\014\022\016\n\006appEui\030\002 \001(\014\022\016\n\006appKey\030\003" +
      " \001(\014\022\017\n\007appSkey\030\004 \001(\014\022\017\n\007nwkSkey\030\005 \001(\014\022\017" +
      "\n\007devAddr\030\006 \001(\r\022\020\n\010datarate\030\007 \001(\r\022\017\n\007txP" +
      "ower\030\010 \001(\021\022\013\n\003adr\030\t \001(\r\022\036\n\nactivition\030\n " +
      "\001(\0162\n.Activtion\022\035\n\tclassType\030\013 \001(\0162\n.Cla" +
      "ssType\022\r\n\005delay\030\014 \001(\r\022\023\n\013channelMask\030\r \003" +
      "(\r\022\017\n\007maxEIRP\030\016 \001(\r\022\021\n\tsglStatus\030\017 \001(\r\022\024" +
      "\n\014sglFrequency\030\020 \001(\r\022\023\n\013sglDatarate\030\021 \001(" +
      "\r\"h\n\010BleParam\022\023\n\013bleInterval\030\001 \001(\002\022\016\n\006bl",
      "eTxp\030\002 \001(\021\022\021\n\tbleOnTime\030\003 \001(\r\022\022\n\nbleOffT" +
      "ime\030\004 \001(\r\022\020\n\010bleOnOff\030\005 \001(\r\"q\n\nSensorDat" +
      "a\022\014\n\004data\030\001 \001(\002\022\021\n\talarmHigh\030\002 \001(\002\022\020\n\010al" +
      "armLow\030\003 \001(\002\022\023\n\013calibration\030\004 \001(\r\022\033\n\005err" +
      "or\030\005 \001(\0162\014.SensorError\"\217\001\n\rSensorDataInt" +
      "\022\031\n\004type\030\001 \001(\0162\013.SensorType\022\014\n\004data\030\002 \001(" +
      "\021\022\021\n\talarmHigh\030\003 \001(\021\022\020\n\010alarmLow\030\004 \001(\021\022\023" +
      "\n\013calibration\030\005 \001(\021\022\033\n\005error\030\006 \001(\0162\014.Sen" +
      "sorError\"\221\001\n\017SensorDataFloat\022\031\n\004type\030\001 \001" +
      "(\0162\013.SensorType\022\014\n\004data\030\002 \001(\002\022\021\n\talarmHi",
      "gh\030\003 \001(\002\022\020\n\010alarmLow\030\004 \001(\002\022\023\n\013calibratio" +
      "n\030\005 \001(\021\022\033\n\005error\030\006 \001(\0162\014.SensorError\"@\n\007" +
      "GpsData\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002" +
      " \001(\001\022\020\n\010altitude\030\003 \001(\001\"+\n\010AxisData\022\t\n\001x\030" +
      "\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\230\002\n\010AppParam" +
      "\022\024\n\003cmd\030\001 \001(\0162\007.AppCmd\022\026\n\016uploadInterval" +
      "\030\002 \001(\r\022\020\n\010syncTime\030\003 \001(\r\022\035\n\tnodeState\030\004 " +
      "\001(\0162\n.NodeState\022\035\n\tnodeAlarm\030\005 \001(\0162\n.Nod" +
      "eAlarm\022\024\n\014nodeAlarmSet\030\006 \001(\r\022\017\n\007confirm\030" +
      "\007 \001(\r\022\035\n\tsmokeCtrl\030\010 \001(\0162\n.SmokeCtrl\022\024\n\014",
      "uploadRepeat\030\t \001(\r\022\033\n\023alarmUploadInterva" +
      "l\030\n \001(\r\022\025\n\ralarmUploadNb\030\013 \001(\r\"\363\007\n\007MsgNo" +
      "de\022\n\n\002id\030\001 \001(\r\022\013\n\003cmd\030\002 \001(\r\022\016\n\006cmdRet\030\003 " +
      "\001(\r\022\035\n\tloraParam\030\004 \001(\0132\n.LoraParam\022\033\n\010bl" +
      "eParam\030\005 \001(\0132\t.BleParam\022\033\n\010appParam\030\006 \001(" +
      "\0132\t.AppParam\022\017\n\007battery\030\007 \001(\021\022\025\n\003gps\030\010 \001" +
      "(\0132\010.GpsData\022\037\n\014acceleration\030\t \001(\0132\t.Axi" +
      "sData\022\034\n\tmagnetism\030\n \001(\0132\t.AxisData\022\034\n\tg" +
      "yroscope\030\013 \001(\0132\t.AxisData\022 \n\013temperature" +
      "\030\014 \001(\0132\013.SensorData\022\035\n\010humidity\030\r \001(\0132\013.",
      "SensorData\022\032\n\005light\030\016 \001(\0132\013.SensorData\022\031" +
      "\n\004leak\030\017 \001(\0132\013.SensorData\022\027\n\002co\030\020 \001(\0132\013." +
      "SensorData\022\030\n\003co2\030\021 \001(\0132\013.SensorData\022\030\n\003" +
      "so2\030\022 \001(\0132\013.SensorData\022\030\n\003no2\030\023 \001(\0132\013.Se" +
      "nsorData\022\030\n\003ch4\030\024 \001(\0132\013.SensorData\022\031\n\004ch" +
      "2o\030\025 \001(\0132\013.SensorData\022\030\n\003lpg\030\026 \001(\0132\013.Sen" +
      "sorData\022\027\n\002o3\030\027 \001(\0132\013.SensorData\022\030\n\003pm1\030" +
      "\030 \001(\0132\013.SensorData\022\032\n\005pm2_5\030\031 \001(\0132\013.Sens" +
      "orData\022\031\n\004pm10\030\032 \001(\0132\013.SensorData\022\032\n\005ang" +
      "le\030\033 \001(\0132\013.SensorData\022\032\n\005cover\030\034 \001(\0132\013.S",
      "ensorData\022\032\n\005level\030\035 \001(\0132\013.SensorData\022\032\n" +
      "\005smoke\030\036 \001(\0132\013.SensorData\022\032\n\005pitch\030\037 \001(\013" +
      "2\013.SensorData\022\031\n\004roll\030  \001(\0132\013.SensorData" +
      "\022\030\n\003yaw\030! \001(\0132\013.SensorData\022\035\n\005flame\030\" \001(" +
      "\0132\016.SensorDataInt\022\"\n\rartificialGas\030# \001(\013" +
      "2\013.SensorData\022!\n\ttempArray\030$ \003(\0132\016.Senso" +
      "rDataInt\022\"\n\rwaterPressure\030% \001(\0132\013.Sensor" +
      "Data*\035\n\tActivtion\022\007\n\003ABP\020\000\022\007\n\003OTA\020\001*2\n\tC" +
      "lassType\022\013\n\007CLASS_A\020\000\022\013\n\007CLASS_B\020\001\022\013\n\007CL" +
      "ASS_C\020\002*\334\001\n\013SensorError\022\023\n\017SENSOR_ERR_NO",
      "NE\020\000\022\026\n\022SENSOR_ERR_NO_DATA\020\001\022\022\n\016SENSOR_E" +
      "RR_CRC\020\002\022\023\n\017SENSOR_ERR_DATA\020\003\022\024\n\020SENSOR_" +
      "ERR_FAULT\020\004\022\024\n\020SENSOR_ERR_ALARM\020\005\022\031\n\025SEN" +
      "SOR_ERR_ALARM_HIGH\020\006\022\030\n\024SENSOR_ERR_ALARM" +
      "_LOW\020\007\022\026\n\022SENSOR_ERR_UNKNOWN\020\177*\371\002\n\nSenso" +
      "rType\022\024\n\020SENSOR_TYPE_TEMP\020\000\022\024\n\020SENSOR_TY" +
      "PE_HUMI\020\001\022\025\n\021SENSOR_TYPE_LIGHT\020\002\022\023\n\017SENS" +
      "OR_TYPE_GPS\020\003\022\025\n\021SENSOR_TYPE_ANGLE\020\004\022\025\n\021" +
      "SENSOR_TYPE_PM2_5\020\005\022\024\n\020SENSOR_TYPE_PM10\020" +
      "\006\022\024\n\020SENSOR_TYPE_LEAK\020\007\022\022\n\016SENSOR_TYPE_C",
      "O\020\010\022\023\n\017SENSOR_TYPE_CO2\020\t\022\023\n\017SENSOR_TYPE_" +
      "NO2\020\n\022\023\n\017SENSOR_TYPE_CH4\020\013\022\023\n\017SENSOR_TYP" +
      "E_LPG\020\014\022\025\n\021SENSOR_TYPE_FLAME\020\r\022\036\n\032SENSOR" +
      "_TYPE_ARTIFICIAL_GAS\020\016\022\032\n\026SENSOR_TYPE_WA" +
      "TER_GAGE\020\017*U\n\006AppCmd\022\020\n\014APP_CMD_NONE\020\000\022\021" +
      "\n\rAPP_CMD_RESET\020\001\022\025\n\021APP_CMD_FAC_RESET\020\002" +
      "\022\017\n\013APP_CMD_DFU\020\003*O\n\tNodeState\022\026\n\022NODE_S" +
      "TATE_UNKNOWN\020\000\022\025\n\021NODE_STATE_STATIC\020\001\022\023\n" +
      "\017NODE_STATE_MOVE\020\002*\251\001\n\tNodeAlarm\022\023\n\017NODE" +
      "_ALARM_NONE\020\000\022\025\n\021NODE_ALARM_STATIC\020\001\022\023\n\017",
      "NODE_ALARM_MOVE\020\002\022\030\n\024NODE_ALARM_COLLISIO" +
      "N\020\003\022\023\n\017NODE_ALARM_ROLL\020\004\022\027\n\023NODE_ALARM_I" +
      "NVERTED\020\005\022\023\n\017NODE_ALARM_FALL\020\006*i\n\tSmokeC" +
      "trl\022\023\n\017SMOKE_CTRL_NONE\020\000\022\021\n\rSMOKE_ERASUR" +
      "E\020\001\022\031\n\025SMOKE_INSPECTION_TEST\020\002\022\031\n\025SMOKE_" +
      "INSPECTION_OVER\020\003"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_LoraParam_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_LoraParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_LoraParam_descriptor,
        new String[] { "DevEui", "AppEui", "AppKey", "AppSkey", "NwkSkey", "DevAddr", "Datarate", "TxPower", "Adr", "Activition", "ClassType", "Delay", "ChannelMask", "MaxEIRP", "SglStatus", "SglFrequency", "SglDatarate", });
    internal_static_BleParam_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_BleParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_BleParam_descriptor,
        new String[] { "BleInterval", "BleTxp", "BleOnTime", "BleOffTime", "BleOnOff", });
    internal_static_SensorData_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_SensorData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_SensorData_descriptor,
        new String[] { "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", });
    internal_static_SensorDataInt_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_SensorDataInt_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_SensorDataInt_descriptor,
        new String[] { "Type", "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", });
    internal_static_SensorDataFloat_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_SensorDataFloat_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_SensorDataFloat_descriptor,
        new String[] { "Type", "Data", "AlarmHigh", "AlarmLow", "Calibration", "Error", });
    internal_static_GpsData_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_GpsData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_GpsData_descriptor,
        new String[] { "Latitude", "Longitude", "Altitude", });
    internal_static_AxisData_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_AxisData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AxisData_descriptor,
        new String[] { "X", "Y", "Z", });
    internal_static_AppParam_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_AppParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_AppParam_descriptor,
        new String[] { "Cmd", "UploadInterval", "SyncTime", "NodeState", "NodeAlarm", "NodeAlarmSet", "Confirm", "SmokeCtrl", "UploadRepeat", "AlarmUploadInterval", "AlarmUploadNb", });
    internal_static_MsgNode_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_MsgNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_MsgNode_descriptor,
        new String[] { "Id", "Cmd", "CmdRet", "LoraParam", "BleParam", "AppParam", "Battery", "Gps", "Acceleration", "Magnetism", "Gyroscope", "Temperature", "Humidity", "Light", "Leak", "Co", "Co2", "So2", "No2", "Ch4", "Ch2O", "Lpg", "O3", "Pm1", "Pm25", "Pm10", "Angle", "Cover", "Level", "Smoke", "Pitch", "Roll", "Yaw", "Flame", "ArtificialGas", "TempArray", "WaterPressure", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
