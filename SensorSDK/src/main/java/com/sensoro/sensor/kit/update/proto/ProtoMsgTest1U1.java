package com.sensoro.sensor.kit.update.proto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoMsgTest1u1.proto

public final class ProtoMsgTest1U1 {
  private ProtoMsgTest1U1() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MsgTestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MsgTest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 retCode = 1;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    boolean hasRetCode();
    /**
     * <code>optional uint32 retCode = 1;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    int getRetCode();

    /**
     * <code>optional uint32 packetNumber = 2;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    boolean hasPacketNumber();
    /**
     * <code>optional uint32 packetNumber = 2;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    int getPacketNumber();

    /**
     * <code>optional uint32 downlinkFreq = 3;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    boolean hasDownlinkFreq();
    /**
     * <code>optional uint32 downlinkFreq = 3;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    int getDownlinkFreq();

    /**
     * <code>optional uint32 downlinkDR = 4;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    boolean hasDownlinkDR();
    /**
     * <code>optional uint32 downlinkDR = 4;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    int getDownlinkDR();

    /**
     * <code>optional int32 downlinkTxPower = 5;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    boolean hasDownlinkTxPower();
    /**
     * <code>optional int32 downlinkTxPower = 5;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    int getDownlinkTxPower();

    /**
     * <code>optional float downlinkSNR = 6;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    boolean hasDownlinkSNR();
    /**
     * <code>optional float downlinkSNR = 6;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    float getDownlinkSNR();

    /**
     * <code>optional int32 downlinkRSSI = 7;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    boolean hasDownlinkRSSI();
    /**
     * <code>optional int32 downlinkRSSI = 7;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    int getDownlinkRSSI();

    /**
     * <code>optional uint32 uplinkInterval = 8;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    boolean hasUplinkInterval();
    /**
     * <code>optional uint32 uplinkInterval = 8;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    int getUplinkInterval();

    /**
     * <code>optional uint32 uplinkFreq = 9;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    boolean hasUplinkFreq();
    /**
     * <code>optional uint32 uplinkFreq = 9;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    int getUplinkFreq();

    /**
     * <code>optional uint32 uplinkDR = 10;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    boolean hasUplinkDR();
    /**
     * <code>optional uint32 uplinkDR = 10;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    int getUplinkDR();

    /**
     * <code>optional int32 uplinkTxPower = 11;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    boolean hasUplinkTxPower();
    /**
     * <code>optional int32 uplinkTxPower = 11;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    int getUplinkTxPower();

    /**
     * <code>optional float uplinkSNR = 12;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    boolean hasUplinkSNR();
    /**
     * <code>optional float uplinkSNR = 12;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    float getUplinkSNR();

    /**
     * <code>optional int32 uplinkRSSI = 13;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    boolean hasUplinkRSSI();
    /**
     * <code>optional int32 uplinkRSSI = 13;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    int getUplinkRSSI();
  }
  /**
   * Protobuf type {@code MsgTest}
   */
  public static final class MsgTest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:MsgTest)
      MsgTestOrBuilder {
    // Use MsgTest.newBuilder() to construct.
    private MsgTest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MsgTest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MsgTest defaultInstance;
    public static MsgTest getDefaultInstance() {
      return defaultInstance;
    }

    public MsgTest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MsgTest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              retCode_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              packetNumber_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              downlinkFreq_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              downlinkDR_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              downlinkTxPower_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              downlinkSNR_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              downlinkRSSI_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              uplinkInterval_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              uplinkFreq_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              uplinkDR_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              uplinkTxPower_ = input.readInt32();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              uplinkSNR_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              uplinkRSSI_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ProtoMsgTest1U1.internal_static_MsgTest_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ProtoMsgTest1U1.internal_static_MsgTest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MsgTest.class, Builder.class);
    }

    public static com.google.protobuf.Parser<MsgTest> PARSER =
        new com.google.protobuf.AbstractParser<MsgTest>() {
      public MsgTest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MsgTest(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<MsgTest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RETCODE_FIELD_NUMBER = 1;
    private int retCode_;
    /**
     * <code>optional uint32 retCode = 1;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public boolean hasRetCode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 retCode = 1;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public int getRetCode() {
      return retCode_;
    }

    public static final int PACKETNUMBER_FIELD_NUMBER = 2;
    private int packetNumber_;
    /**
     * <code>optional uint32 packetNumber = 2;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public boolean hasPacketNumber() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 packetNumber = 2;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public int getPacketNumber() {
      return packetNumber_;
    }

    public static final int DOWNLINKFREQ_FIELD_NUMBER = 3;
    private int downlinkFreq_;
    /**
     * <code>optional uint32 downlinkFreq = 3;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public boolean hasDownlinkFreq() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 downlinkFreq = 3;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public int getDownlinkFreq() {
      return downlinkFreq_;
    }

    public static final int DOWNLINKDR_FIELD_NUMBER = 4;
    private int downlinkDR_;
    /**
     * <code>optional uint32 downlinkDR = 4;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public boolean hasDownlinkDR() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 downlinkDR = 4;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public int getDownlinkDR() {
      return downlinkDR_;
    }

    public static final int DOWNLINKTXPOWER_FIELD_NUMBER = 5;
    private int downlinkTxPower_;
    /**
     * <code>optional int32 downlinkTxPower = 5;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    public boolean hasDownlinkTxPower() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 downlinkTxPower = 5;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    public int getDownlinkTxPower() {
      return downlinkTxPower_;
    }

    public static final int DOWNLINKSNR_FIELD_NUMBER = 6;
    private float downlinkSNR_;
    /**
     * <code>optional float downlinkSNR = 6;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public boolean hasDownlinkSNR() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float downlinkSNR = 6;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public float getDownlinkSNR() {
      return downlinkSNR_;
    }

    public static final int DOWNLINKRSSI_FIELD_NUMBER = 7;
    private int downlinkRSSI_;
    /**
     * <code>optional int32 downlinkRSSI = 7;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public boolean hasDownlinkRSSI() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 downlinkRSSI = 7;</code>
     *
     * <pre>
     * device -&gt; mobile
     * </pre>
     */
    public int getDownlinkRSSI() {
      return downlinkRSSI_;
    }

    public static final int UPLINKINTERVAL_FIELD_NUMBER = 8;
    private int uplinkInterval_;
    /**
     * <code>optional uint32 uplinkInterval = 8;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public boolean hasUplinkInterval() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 uplinkInterval = 8;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public int getUplinkInterval() {
      return uplinkInterval_;
    }

    public static final int UPLINKFREQ_FIELD_NUMBER = 9;
    private int uplinkFreq_;
    /**
     * <code>optional uint32 uplinkFreq = 9;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public boolean hasUplinkFreq() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 uplinkFreq = 9;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public int getUplinkFreq() {
      return uplinkFreq_;
    }

    public static final int UPLINKDR_FIELD_NUMBER = 10;
    private int uplinkDR_;
    /**
     * <code>optional uint32 uplinkDR = 10;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public boolean hasUplinkDR() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 uplinkDR = 10;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public int getUplinkDR() {
      return uplinkDR_;
    }

    public static final int UPLINKTXPOWER_FIELD_NUMBER = 11;
    private int uplinkTxPower_;
    /**
     * <code>optional int32 uplinkTxPower = 11;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public boolean hasUplinkTxPower() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 uplinkTxPower = 11;</code>
     *
     * <pre>
     * mobile &lt;-&gt; device
     * </pre>
     */
    public int getUplinkTxPower() {
      return uplinkTxPower_;
    }

    public static final int UPLINKSNR_FIELD_NUMBER = 12;
    private float uplinkSNR_;
    /**
     * <code>optional float uplinkSNR = 12;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    public boolean hasUplinkSNR() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float uplinkSNR = 12;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    public float getUplinkSNR() {
      return uplinkSNR_;
    }

    public static final int UPLINKRSSI_FIELD_NUMBER = 13;
    private int uplinkRSSI_;
    /**
     * <code>optional int32 uplinkRSSI = 13;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    public boolean hasUplinkRSSI() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int32 uplinkRSSI = 13;</code>
     *
     * <pre>
     * gw -&gt; device -&gt; mobile
     * </pre>
     */
    public int getUplinkRSSI() {
      return uplinkRSSI_;
    }

    private void initFields() {
      retCode_ = 0;
      packetNumber_ = 0;
      downlinkFreq_ = 0;
      downlinkDR_ = 0;
      downlinkTxPower_ = 0;
      downlinkSNR_ = 0F;
      downlinkRSSI_ = 0;
      uplinkInterval_ = 0;
      uplinkFreq_ = 0;
      uplinkDR_ = 0;
      uplinkTxPower_ = 0;
      uplinkSNR_ = 0F;
      uplinkRSSI_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, retCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, packetNumber_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, downlinkFreq_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, downlinkDR_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, downlinkTxPower_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, downlinkSNR_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, downlinkRSSI_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, uplinkInterval_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, uplinkFreq_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, uplinkDR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, uplinkTxPower_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, uplinkSNR_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, uplinkRSSI_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, retCode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, packetNumber_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, downlinkFreq_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, downlinkDR_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, downlinkTxPower_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, downlinkSNR_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, downlinkRSSI_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, uplinkInterval_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, uplinkFreq_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, uplinkDR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, uplinkTxPower_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, uplinkSNR_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, uplinkRSSI_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static MsgTest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MsgTest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MsgTest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static MsgTest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static MsgTest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MsgTest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static MsgTest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static MsgTest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static MsgTest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static MsgTest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(MsgTest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MsgTest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MsgTest)
        MsgTestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ProtoMsgTest1U1.internal_static_MsgTest_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ProtoMsgTest1U1.internal_static_MsgTest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                MsgTest.class, Builder.class);
      }

      // Construct using ProtoMsgTest1U1.MsgTest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        retCode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        packetNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        downlinkFreq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        downlinkDR_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        downlinkTxPower_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        downlinkSNR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        downlinkRSSI_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        uplinkInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        uplinkFreq_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        uplinkDR_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        uplinkTxPower_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        uplinkSNR_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        uplinkRSSI_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ProtoMsgTest1U1.internal_static_MsgTest_descriptor;
      }

      public MsgTest getDefaultInstanceForType() {
        return MsgTest.getDefaultInstance();
      }

      public MsgTest build() {
        MsgTest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public MsgTest buildPartial() {
        MsgTest result = new MsgTest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.retCode_ = retCode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.packetNumber_ = packetNumber_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.downlinkFreq_ = downlinkFreq_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.downlinkDR_ = downlinkDR_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.downlinkTxPower_ = downlinkTxPower_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.downlinkSNR_ = downlinkSNR_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.downlinkRSSI_ = downlinkRSSI_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.uplinkInterval_ = uplinkInterval_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.uplinkFreq_ = uplinkFreq_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.uplinkDR_ = uplinkDR_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.uplinkTxPower_ = uplinkTxPower_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.uplinkSNR_ = uplinkSNR_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.uplinkRSSI_ = uplinkRSSI_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof MsgTest) {
          return mergeFrom((MsgTest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(MsgTest other) {
        if (other == MsgTest.getDefaultInstance()) return this;
        if (other.hasRetCode()) {
          setRetCode(other.getRetCode());
        }
        if (other.hasPacketNumber()) {
          setPacketNumber(other.getPacketNumber());
        }
        if (other.hasDownlinkFreq()) {
          setDownlinkFreq(other.getDownlinkFreq());
        }
        if (other.hasDownlinkDR()) {
          setDownlinkDR(other.getDownlinkDR());
        }
        if (other.hasDownlinkTxPower()) {
          setDownlinkTxPower(other.getDownlinkTxPower());
        }
        if (other.hasDownlinkSNR()) {
          setDownlinkSNR(other.getDownlinkSNR());
        }
        if (other.hasDownlinkRSSI()) {
          setDownlinkRSSI(other.getDownlinkRSSI());
        }
        if (other.hasUplinkInterval()) {
          setUplinkInterval(other.getUplinkInterval());
        }
        if (other.hasUplinkFreq()) {
          setUplinkFreq(other.getUplinkFreq());
        }
        if (other.hasUplinkDR()) {
          setUplinkDR(other.getUplinkDR());
        }
        if (other.hasUplinkTxPower()) {
          setUplinkTxPower(other.getUplinkTxPower());
        }
        if (other.hasUplinkSNR()) {
          setUplinkSNR(other.getUplinkSNR());
        }
        if (other.hasUplinkRSSI()) {
          setUplinkRSSI(other.getUplinkRSSI());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        MsgTest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (MsgTest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int retCode_ ;
      /**
       * <code>optional uint32 retCode = 1;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public boolean hasRetCode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 retCode = 1;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public int getRetCode() {
        return retCode_;
      }
      /**
       * <code>optional uint32 retCode = 1;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder setRetCode(int value) {
        bitField0_ |= 0x00000001;
        retCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 retCode = 1;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder clearRetCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        retCode_ = 0;
        onChanged();
        return this;
      }

      private int packetNumber_ ;
      /**
       * <code>optional uint32 packetNumber = 2;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public boolean hasPacketNumber() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 packetNumber = 2;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public int getPacketNumber() {
        return packetNumber_;
      }
      /**
       * <code>optional uint32 packetNumber = 2;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder setPacketNumber(int value) {
        bitField0_ |= 0x00000002;
        packetNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 packetNumber = 2;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder clearPacketNumber() {
        bitField0_ = (bitField0_ & ~0x00000002);
        packetNumber_ = 0;
        onChanged();
        return this;
      }

      private int downlinkFreq_ ;
      /**
       * <code>optional uint32 downlinkFreq = 3;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public boolean hasDownlinkFreq() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 downlinkFreq = 3;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public int getDownlinkFreq() {
        return downlinkFreq_;
      }
      /**
       * <code>optional uint32 downlinkFreq = 3;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder setDownlinkFreq(int value) {
        bitField0_ |= 0x00000004;
        downlinkFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 downlinkFreq = 3;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder clearDownlinkFreq() {
        bitField0_ = (bitField0_ & ~0x00000004);
        downlinkFreq_ = 0;
        onChanged();
        return this;
      }

      private int downlinkDR_ ;
      /**
       * <code>optional uint32 downlinkDR = 4;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public boolean hasDownlinkDR() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 downlinkDR = 4;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public int getDownlinkDR() {
        return downlinkDR_;
      }
      /**
       * <code>optional uint32 downlinkDR = 4;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder setDownlinkDR(int value) {
        bitField0_ |= 0x00000008;
        downlinkDR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 downlinkDR = 4;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder clearDownlinkDR() {
        bitField0_ = (bitField0_ & ~0x00000008);
        downlinkDR_ = 0;
        onChanged();
        return this;
      }

      private int downlinkTxPower_ ;
      /**
       * <code>optional int32 downlinkTxPower = 5;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public boolean hasDownlinkTxPower() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 downlinkTxPower = 5;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public int getDownlinkTxPower() {
        return downlinkTxPower_;
      }
      /**
       * <code>optional int32 downlinkTxPower = 5;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public Builder setDownlinkTxPower(int value) {
        bitField0_ |= 0x00000010;
        downlinkTxPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 downlinkTxPower = 5;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public Builder clearDownlinkTxPower() {
        bitField0_ = (bitField0_ & ~0x00000010);
        downlinkTxPower_ = 0;
        onChanged();
        return this;
      }

      private float downlinkSNR_ ;
      /**
       * <code>optional float downlinkSNR = 6;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public boolean hasDownlinkSNR() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float downlinkSNR = 6;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public float getDownlinkSNR() {
        return downlinkSNR_;
      }
      /**
       * <code>optional float downlinkSNR = 6;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder setDownlinkSNR(float value) {
        bitField0_ |= 0x00000020;
        downlinkSNR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float downlinkSNR = 6;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder clearDownlinkSNR() {
        bitField0_ = (bitField0_ & ~0x00000020);
        downlinkSNR_ = 0F;
        onChanged();
        return this;
      }

      private int downlinkRSSI_ ;
      /**
       * <code>optional int32 downlinkRSSI = 7;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public boolean hasDownlinkRSSI() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 downlinkRSSI = 7;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public int getDownlinkRSSI() {
        return downlinkRSSI_;
      }
      /**
       * <code>optional int32 downlinkRSSI = 7;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder setDownlinkRSSI(int value) {
        bitField0_ |= 0x00000040;
        downlinkRSSI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 downlinkRSSI = 7;</code>
       *
       * <pre>
       * device -&gt; mobile
       * </pre>
       */
      public Builder clearDownlinkRSSI() {
        bitField0_ = (bitField0_ & ~0x00000040);
        downlinkRSSI_ = 0;
        onChanged();
        return this;
      }

      private int uplinkInterval_ ;
      /**
       * <code>optional uint32 uplinkInterval = 8;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public boolean hasUplinkInterval() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 uplinkInterval = 8;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public int getUplinkInterval() {
        return uplinkInterval_;
      }
      /**
       * <code>optional uint32 uplinkInterval = 8;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder setUplinkInterval(int value) {
        bitField0_ |= 0x00000080;
        uplinkInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uplinkInterval = 8;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder clearUplinkInterval() {
        bitField0_ = (bitField0_ & ~0x00000080);
        uplinkInterval_ = 0;
        onChanged();
        return this;
      }

      private int uplinkFreq_ ;
      /**
       * <code>optional uint32 uplinkFreq = 9;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public boolean hasUplinkFreq() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 uplinkFreq = 9;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public int getUplinkFreq() {
        return uplinkFreq_;
      }
      /**
       * <code>optional uint32 uplinkFreq = 9;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder setUplinkFreq(int value) {
        bitField0_ |= 0x00000100;
        uplinkFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uplinkFreq = 9;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder clearUplinkFreq() {
        bitField0_ = (bitField0_ & ~0x00000100);
        uplinkFreq_ = 0;
        onChanged();
        return this;
      }

      private int uplinkDR_ ;
      /**
       * <code>optional uint32 uplinkDR = 10;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public boolean hasUplinkDR() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 uplinkDR = 10;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public int getUplinkDR() {
        return uplinkDR_;
      }
      /**
       * <code>optional uint32 uplinkDR = 10;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder setUplinkDR(int value) {
        bitField0_ |= 0x00000200;
        uplinkDR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 uplinkDR = 10;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder clearUplinkDR() {
        bitField0_ = (bitField0_ & ~0x00000200);
        uplinkDR_ = 0;
        onChanged();
        return this;
      }

      private int uplinkTxPower_ ;
      /**
       * <code>optional int32 uplinkTxPower = 11;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public boolean hasUplinkTxPower() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 uplinkTxPower = 11;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public int getUplinkTxPower() {
        return uplinkTxPower_;
      }
      /**
       * <code>optional int32 uplinkTxPower = 11;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder setUplinkTxPower(int value) {
        bitField0_ |= 0x00000400;
        uplinkTxPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 uplinkTxPower = 11;</code>
       *
       * <pre>
       * mobile &lt;-&gt; device
       * </pre>
       */
      public Builder clearUplinkTxPower() {
        bitField0_ = (bitField0_ & ~0x00000400);
        uplinkTxPower_ = 0;
        onChanged();
        return this;
      }

      private float uplinkSNR_ ;
      /**
       * <code>optional float uplinkSNR = 12;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public boolean hasUplinkSNR() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float uplinkSNR = 12;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public float getUplinkSNR() {
        return uplinkSNR_;
      }
      /**
       * <code>optional float uplinkSNR = 12;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public Builder setUplinkSNR(float value) {
        bitField0_ |= 0x00000800;
        uplinkSNR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float uplinkSNR = 12;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public Builder clearUplinkSNR() {
        bitField0_ = (bitField0_ & ~0x00000800);
        uplinkSNR_ = 0F;
        onChanged();
        return this;
      }

      private int uplinkRSSI_ ;
      /**
       * <code>optional int32 uplinkRSSI = 13;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public boolean hasUplinkRSSI() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 uplinkRSSI = 13;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public int getUplinkRSSI() {
        return uplinkRSSI_;
      }
      /**
       * <code>optional int32 uplinkRSSI = 13;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public Builder setUplinkRSSI(int value) {
        bitField0_ |= 0x00001000;
        uplinkRSSI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 uplinkRSSI = 13;</code>
       *
       * <pre>
       * gw -&gt; device -&gt; mobile
       * </pre>
       */
      public Builder clearUplinkRSSI() {
        bitField0_ = (bitField0_ & ~0x00001000);
        uplinkRSSI_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:MsgTest)
    }

    static {
      defaultInstance = new MsgTest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:MsgTest)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MsgTest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_MsgTest_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\025protoMsgTest1u1.proto\"\232\002\n\007MsgTest\022\017\n\007r" +
      "etCode\030\001 \001(\r\022\024\n\014packetNumber\030\002 \001(\r\022\024\n\014do" +
      "wnlinkFreq\030\003 \001(\r\022\022\n\ndownlinkDR\030\004 \001(\r\022\027\n\017" +
      "downlinkTxPower\030\005 \001(\005\022\023\n\013downlinkSNR\030\006 \001" +
      "(\002\022\024\n\014downlinkRSSI\030\007 \001(\005\022\026\n\016uplinkInterv" +
      "al\030\010 \001(\r\022\022\n\nuplinkFreq\030\t \001(\r\022\020\n\010uplinkDR" +
      "\030\n \001(\r\022\025\n\ruplinkTxPower\030\013 \001(\005\022\021\n\tuplinkS" +
      "NR\030\014 \001(\002\022\022\n\nuplinkRSSI\030\r \001(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_MsgTest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_MsgTest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_MsgTest_descriptor,
        new String[] { "RetCode", "PacketNumber", "DownlinkFreq", "DownlinkDR", "DownlinkTxPower", "DownlinkSNR", "DownlinkRSSI", "UplinkInterval", "UplinkFreq", "UplinkDR", "UplinkTxPower", "UplinkSNR", "UplinkRSSI", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
